<?xml version="1.0"?>
<stylesheet id="styl0Mcditg36kRI" lang="any" name="blog-stylesheet" show-in="main" webpalschematype="wpAppStylesheet"><![CDATA[<?xml version="1.0"?>
<!DOCTYPE xsl:stylesheet [
<!ENTITY nbsp "&#160;" >
]>
<!-- -->
<!-- (c) 2001-present All Copyrights Palomino System Innovations Inc.
Illegal reproduction and disclosure will be prosecuted  -->

<xsl:stylesheet
                version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:wp="http://www.palominosys.com/wp"
                xmlns:php="http://php.net/xsl"
                xmlns:date="http://exslt.org/dates-and-times" 
                xmlns:exsl="http://exslt.org/common"
                extension-element-prefixes="exsl"
                >

  <!-- ========================================================================================= -->
  <!-- =================================== bloglist templates ================================== -->
  <!-- ========================================================================================= -->
  <xsl:template match="bloglist" mode="homewidget">

    <xsl:for-each select="./blog">   
      
      <xsl:sort select="php:function('strtotime',string(@date))" order="descending" />
      
      <xsl:variable name="blog-link">
        <xsl:text>/about-us/blog?node=</xsl:text>
        <xsl:value-of select="./@name" />
      </xsl:variable>
      
      <xsl:if test="position() &lt; 3">
        <h3><a href="{$blog-link}"><xsl:value-of select="title"/></a></h3>
        <xsl:choose>
          <xsl:when test="string-length(text) > 75">
            <p class="standard"><xsl:value-of select="substring(text, 1, 75)" />...</p>
          </xsl:when>
          <xsl:otherwise>
            <p class="standard"><xsl:value-of select="text" /></p>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>
  
  <xsl:template match="bloglist">

    <xsl:variable name="max-items">
      <xsl:choose>
        <xsl:when test="./@index='10-most-recent'"><xsl:value-of select="number(10)"/></xsl:when>
        <xsl:when test="./@index='5-most-recent'"><xsl:value-of select="number(5)"/></xsl:when>
        <xsl:when test="./@index='most-recent'"><xsl:value-of select="number(1)"/></xsl:when>
        <xsl:when test="./@index='list-none'"><xsl:value-of select="number(0)"/></xsl:when>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="items-per-page">
      <xsl:value-of select="number(10)"/>
    </xsl:variable>

    <!-- We need to get a sorted list of the articles before we grab the subset,
or else only the first n items will be sorted -->
    <xsl:variable name="sorted-articles">
      <xsl:for-each select="./blog">
        <xsl:sort select="php:function('strtotime',string(@date))" order="descending" />
        <xsl:choose>
          <xsl:when test="./@archived and ./@archived = 'yes'">
            <!-- do nothing -->
          </xsl:when>
          <xsl:otherwise>
            <xsl:copy-of select="."/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
    </xsl:variable>
    <!-- this subset represents the first page's items only -->
    <xsl:variable name="subset">
      <xsl:for-each select="exsl:node-set($sorted-articles)/blog[position() &lt;= $items-per-page]">
        <xsl:copy-of select="."/>
      </xsl:for-each>
    </xsl:variable>
    <!-- determine how many items there will be...-->
    <xsl:variable name="num-items">
      <xsl:value-of select="count(exsl:node-set($sorted-articles)/blog)"/>
    </xsl:variable>
    <!-- and determine how many pages we will need for them -->
    <xsl:variable name="num-pages">
      <xsl:value-of select="ceiling($num-items div $items-per-page)"/>
    </xsl:variable> 

    
    <!-- START output the bloglist -->

    <div class="row">
      <div class="col-md-9">
        <xsl:element name="div">
          <xsl:attribute name="data-bloglist-id">
            <xsl:value-of select="./@id"/>
          </xsl:attribute>
          <xsl:for-each select="exsl:node-set($subset)/blog">
            <xsl:apply-templates select="." mode="img"/>
          </xsl:for-each>
          <xsl:element name="div">
            <xsl:attribute name="class">
              <xsl:text>pagination</xsl:text>
            </xsl:attribute>
            <!-- show which items we are display e.g. 1-10 -->
            <xsl:element name="div">

            </xsl:element>
            <!-- END show which items -->
            <!-- show prev button -->
            <xsl:element name="button">
              <!-- since page 1 will always be the first rendered,
disable the prev button on first load -->
              <xsl:attribute name="class">
                <xsl:text>prev page btn disabled</xsl:text>
              </xsl:attribute>
              <xsl:value-of select="'&lt;'"/>
            </xsl:element>
            <!-- it's not easy to do a for-loop in xslt, so we place
a single placeholder page. We give it a data attribute
with the num-pages. We will access it with javascript
and display the full pagination-->
            <xsl:element name="button">
              <xsl:attribute name="class">
                <xsl:text>page btn</xsl:text>
              </xsl:attribute>
              <xsl:attribute name="data-page-num">
                <xsl:value-of select="'1'"/>
              </xsl:attribute>
              <xsl:attribute name="data-num-pages">
                <xsl:value-of select="$num-pages"/>
              </xsl:attribute>
              <xsl:value-of select="'1'"/>
            </xsl:element>
            <!-- TODO output an element for each page number -->
            <!-- show next button -->
            <xsl:element name="button">
              <xsl:attribute name="class">
                <xsl:text>next page btn</xsl:text>
              </xsl:attribute>
              <xsl:attribute name="data-page-num">
                <xsl:text>2</xsl:text>
              </xsl:attribute>
              <xsl:value-of select="'&gt;'"/>
            </xsl:element>
          </xsl:element>
        </xsl:element>
      </div>
      
<!--=================sidebar==================-->
      <div class="col-md-3 blog-sidebar" style="padding-top: 75px;">
        
        <xsl:call-template name="blog-sidebar">

        </xsl:call-template>
        
      </div>
<!-- =============== /sidebar =================     -->
      
      
    </div>
<!--  /row    -->

    <!-- END output the bloglist -->
    <!--     <script src="/resources/Bloglist/js/bloglist.js"></script> -->
    <script src="?f=extensions/bloglist/Bloglist/Resources/js/bloglist.js"></script>
  </xsl:template>

  <!--   <xsl:apply-templates select="./text" mode="placeholder"/> -->
  <xsl:template match="node()|@*" mode="placeholder">
    <xsl:choose>
      <xsl:when test="name(.)='img'">
        <xsl:apply-templates select="." mode="placeholder"/>
      </xsl:when>
      <xsl:when test="count(./*) &gt; 0">
        <xsl:copy>
          <xsl:apply-templates select="node()|@*" mode="placeholder"/>
        </xsl:copy>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="." mode="html"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template match="blog/text" mode="placeholder">
    <!-- Get the transformed XML -->
    <!--     <xsl:variable name="transformed-data">
<xsl:apply-templates select="." mode="html"/>
</xsl:variable>
<xsl:variable name="converted-data">
<xsl:call-template name="html-with-placeholder-img">
<xsl:with-param name="data" select="$transformed-data"/>
</xsl:call-template>
</xsl:variable>
<xsl:copy-of select="$converted-data"/> -->
    
    <xsl:apply-templates select="./*" mode="placeholder"/>
  </xsl:template>
  
  <xsl:template name="html-with-placeholder-img">
    <xsl:param name="data"/>
    <xsl:for-each select="exsl:node-set($data)/text/*">
      <xsl:copy-of select="."/>
    </xsl:for-each>
  </xsl:template>


  <xsl:template match="img" mode="placeholder">
    <xsl:element name="div">
      This is an img!!
    </xsl:element>
  </xsl:template>


  <xsl:template match="blog" mode="img">
    <xsl:variable name="blog-link">
      <xsl:value-of select="$PATH"/>
      <xsl:text>?node=</xsl:text>
      <xsl:value-of select="./@name"/>
    </xsl:variable>
    
    <xsl:variable name="blog-text">
      <!--         <xsl:apply-templates select="./text"/> -->
      <xsl:variable name="text">
        <xsl:apply-templates select="./text"/>
      </xsl:variable>
      <xsl:for-each select="exsl:node-set($text)/*">
        <xsl:value-of select="."/>
        <xsl:if test="string-length(.)=0">
          <xsl:text>. </xsl:text>
        </xsl:if>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="blog-summary">
      <xsl:value-of select="concat(substring($blog-text, 0, 300), '...')"/>
    </xsl:variable>

    <xsl:element name="article">
      <xsl:attribute name="class">
        <xsl:text>blogPost</xsl:text>
      </xsl:attribute> 
        <!--START header-->
        <xsl:element name="div">
          <xsl:attribute name="class">
            <xsl:text>blogheader</xsl:text>
          </xsl:attribute>
          <!--title-->
          <xsl:element name="h2">
            <xsl:element name="a">
              <xsl:attribute name="href">
                <xsl:value-of select="$blog-link"/>
              </xsl:attribute>
              <xsl:value-of select="./title"/>
            </xsl:element>
          </xsl:element>
          <!--START .meta-line-->
          <xsl:element name="div">
            <xsl:attribute name="class">
              <xsl:text>meta-line clearfix</xsl:text>
            </xsl:attribute>
            <xsl:element name="div">
              <xsl:attribute name="class">
<!--                 <xsl:text>pull-left</xsl:text> -->
                <xsl:text>row category-row</xsl:text>
              </xsl:attribute>

              <!--author-->
              <!--             <xsl:element name="span">
<xsl:attribute name="class">
<xsl:text>meta-author</xsl:text>
</xsl:attribute> -->
              <!--START author icon-->
              <!--               <i class="fa fa-user"></i> -->
              <!--END author icon-->
              <!--               <xsl:text>Author: </xsl:text>
<xsl:choose>
<xsl:when test="./author">
<xsl:value-of select="./author"/>
</xsl:when>
<xsl:otherwise>
<xsl:text>BDDC</xsl:text>
</xsl:otherwise>
</xsl:choose>
</xsl:element> -->

              <!--category-->
              <xsl:element name="span">
                <xsl:attribute name="class">
                  <xsl:text>meta-category</xsl:text>
                </xsl:attribute>
                <!--START category icon-->
                <!--               <i class="fa fa-archive"></i> -->
                <!--END category icon-->
                <xsl:text>In: </xsl:text>
                <xsl:element name="ul">
                  <!-- main category -->
                  <xsl:if test="./categories/main-category">
                    <xsl:variable name="main-category-link">
                      <!--                     <xsl:value-of select="$PATH"/> -->
                      <xsl:text>#category=</xsl:text>
                      <xsl:value-of select="./categories/main-category"/>
                    </xsl:variable>
                    <xsl:element name="li">
                      <xsl:attribute name="class">
                        <xsl:text>main-category</xsl:text>
                      </xsl:attribute>
                      <xsl:attribute name="style">display:inline-block;</xsl:attribute>
                      <xsl:element name="a">
                        <xsl:attribute name="href">
                          <xsl:value-of select="$main-category-link"/>
                        </xsl:attribute>
                        <xsl:attribute name="data-filter-type">
                          <xsl:text>category</xsl:text>
                        </xsl:attribute>
                        <xsl:attribute name="data-filter-value">
                          <xsl:value-of select="./categories/main-category"/>
                        </xsl:attribute>
                        <xsl:value-of select="./categories/main-category"/>
                      </xsl:element>
                    </xsl:element>
                  </xsl:if>
                  <xsl:choose>
                    <xsl:when test="count(./categories/*) &gt; 1">

                      <xsl:for-each select="./categories/category">
                        <!--TODO: Create category link properly-->
                        <xsl:variable name="category-link">
                          <!--                         <xsl:value-of select="$PATH"/> -->
                          <xsl:text>#category=</xsl:text>
                          <xsl:value-of select="."/>
                        </xsl:variable>
                        
                        <xsl:element name="li">
                          
                          <xsl:attribute name="class">
                            <xsl:text>category</xsl:text>
                          </xsl:attribute>
                          
                          <xsl:attribute name="style">display:inline-block;</xsl:attribute>
                          
                          <xsl:element name="a">
                            
                            <xsl:attribute name="href">
                              <xsl:value-of select="$category-link"/>
                            </xsl:attribute>
                            
                            <xsl:attribute name="data-filter-type">
                              <xsl:text>category</xsl:text>
                            </xsl:attribute>
                            
                            <xsl:attribute name="data-filter-value">
                              <xsl:value-of select="."/>
                            </xsl:attribute>
                            
                            <xsl:value-of select="."/>
                          </xsl:element>
                          
                        </xsl:element>
                      </xsl:for-each>

                    </xsl:when>
                    <xsl:otherwise>
                      <!--                     <i>None</i> -->
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:element>
            </xsl:element>
            <xsl:element name="div">
              <xsl:attribute name="class">
<!--                 <xsl:text>pull-right</xsl:text> -->
                <xsl:text>row tag-row</xsl:text>
              </xsl:attribute>
              <!--tags-->
              <xsl:element name="ul">
                <xsl:attribute name="class">
                  <xsl:text>meta-tags</xsl:text>
                </xsl:attribute>
                  <!--START tag icon-->
                  <xsl:choose>
                    <xsl:when test="count(./tags/*) &gt; 0">
                      <i class="fa fa-tags"></i>
                    </xsl:when>
                    <xsl:otherwise>
                      <!--                     <i class="fa fa-tag"></i> -->
                      <!--                     <i class="fa fa-tag"></i><i>None</i> -->
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--END tag icon-->
                  <xsl:for-each select="./tags/*">
                    <!--TODO: Create xsl tag link properly-->
                    <xsl:variable name="tag-link">
                      <!--                     <xsl:value-of select="$PATH"/> -->
                      <xsl:text>#tag=</xsl:text>
                      <xsl:value-of select="."/>
                    </xsl:variable>
                    
                    <xsl:element name="li">
                      <xsl:attribute name="class">
                        <xsl:text>tag</xsl:text>
                      </xsl:attribute>
                      
                      <xsl:attribute name="style">display:inline-block;</xsl:attribute>
                     
                      <xsl:element name="a">
                        <xsl:attribute name="href">
                          <xsl:value-of select="$tag-link"/>
                        </xsl:attribute>
                        
                        <xsl:attribute name="data-filter-type">
                          <xsl:text>tag</xsl:text>
                        </xsl:attribute>
                        
                        <xsl:attribute name="data-filter-value">
                          <xsl:value-of select="."/>
                        </xsl:attribute>
                        
                        <xsl:value-of select="."/>
                      </xsl:element>
                    </xsl:element>
                  </xsl:for-each>
              </xsl:element>
            </xsl:element>
            <!--END .meta-line-->
          </xsl:element>
        </xsl:element>
        <!--END header-->
        <!--START .entry-content-->
        <xsl:element name="div">
          
          <xsl:attribute name="class">
            <xsl:text>entry-content</xsl:text>
          </xsl:attribute>
          
          <!--START .row-->
          <xsl:element name="div">
            <xsl:attribute name="class">
              <xsl:text>row</xsl:text>
            </xsl:attribute>
            
            <!--START .col-sm-5-->
            <xsl:element name="div">
              <xsl:attribute name="class">
                <xsl:text>col-md-5</xsl:text>
              </xsl:attribute>
              
              <!--START figure.blog-image-->
              <xsl:element name="figure">
                <xsl:attribute name="class">
                  <xsl:text>blog-image</xsl:text>
                </xsl:attribute>
                
                <xsl:element name="a">
                  <xsl:attribute name="href">
                    <xsl:value-of select="$blog-link"/>
                  </xsl:attribute>
                  
                  <!--date-->
                  <xsl:element name="div">
                    <xsl:attribute name="class">
                      <xsl:text>blog-date-info</xsl:text>
                    </xsl:attribute>
                    
                    <xsl:element name="span">
                      <xsl:attribute name="class">
                        <xsl:text>blog-month</xsl:text>
                      </xsl:attribute>
                      
                      <xsl:call-template name="format-date-blog">
                        <xsl:with-param name="date" select="./@date"/>
                        <xsl:with-param name="format" select="'MMM'"/>
                      </xsl:call-template>
                      
                    </xsl:element>
                    
                    <xsl:element name="span">
                      <xsl:attribute name="class">
                        <xsl:text>blog-day</xsl:text>
                      </xsl:attribute>
                      
                      <xsl:call-template name="format-date-blog">
                        <xsl:with-param name="date" select="./@date"/>
                        <xsl:with-param name="format" select="'D'"/>
                      </xsl:call-template>
                      
                    </xsl:element>
                    
                    <xsl:element name="span">
                      <xsl:attribute name="class">
                        <xsl:text>blog-year</xsl:text>
                      </xsl:attribute>
                      
                      <xsl:call-template name="format-date-blog">
                        <xsl:with-param name="date" select="./@date"/>
                        <xsl:with-param name="format" select="'YYYY'"/>
                      </xsl:call-template>
                    </xsl:element>
                  </xsl:element>
                  
                  <!--image-->
                  <xsl:choose>
                    <xsl:when test="./image">
                      <xsl:call-template name="render-image-as-img">
                        <xsl:with-param name="src" select="./image/@src"/>
                        <xsl:with-param name="width" select="330"/>
                        <xsl:with-param name="height" select="210"/>
                      </xsl:call-template>
                    </xsl:when>
                    
                    <xsl:otherwise>
                      <xsl:element name="img">
                        <xsl:attribute name="src">
                          <xsl:text>//placehold.it/330x210</xsl:text>
                        </xsl:attribute>
                      </xsl:element>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:element>
              <!--END figure.blog-image-->
            </xsl:element>
            <!--END .col-sm-5-->
            
            <!--START .col-sm-7-->
            <xsl:element name="div">
              <xsl:attribute name="class">
                <xsl:text>col-md-7</xsl:text>
              </xsl:attribute>
              
              <xsl:element name="div">
                <xsl:attribute name="class">
                  <xsl:text>blog-summary</xsl:text>
                </xsl:attribute>
                
                <!--summary-->
                <xsl:element name="p">
                  <xsl:value-of select="$blog-summary"/>
                </xsl:element>
                
                <!--read more-->
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:text>read-more</xsl:text>
                  </xsl:attribute>
                  
                  <xsl:element name="a">
                    <xsl:attribute name="href">
                      <xsl:value-of select="$blog-link"/>
                    </xsl:attribute>
                    
                    <xsl:text>Read More</xsl:text>
                  </xsl:element>
                </xsl:element>
              </xsl:element>
            </xsl:element>
            <!--END .col-sm-7-->
          </xsl:element>
          <!--START .col-sm-12-->
          
          <xsl:element name="div">
            <xsl:attribute name="class">
              <xsl:text>col-sm-12</xsl:text>
            </xsl:attribute>
            <!--           <xsl:apply-templates select="./text" mode="placeholder"/> -->
          </xsl:element>
          <!--END .row-->
        </xsl:element>
        <!--END .entry-content-->
    </xsl:element>
  </xsl:template>

  <xsl:template name="render-image-as-img">
    <xsl:param name="src"/>
    <xsl:param name="width" select="''"/>
    <xsl:param name="height" select="''"/>
    <xsl:param name="class" select="''"/>

    <xsl:variable name="size">
      <xsl:choose>
        <xsl:when test="$width and not($width = '') and $height and not($height = '')">
          <xsl:value-of select="$width"/>
          <xsl:text>x</xsl:text>
          <xsl:value-of select="$height"/>
        </xsl:when>
      </xsl:choose>
    </xsl:variable>

    <xsl:element name="img">
      <xsl:attribute name="src">
        <xsl:value-of select="concat('?f=', $src)"/>
        <xsl:if test="$size">
          <xsl:value-of select="concat('&amp;resize=', $size)"/>
        </xsl:if>
      </xsl:attribute>
      
      <xsl:if test="$class and $class != ''">
        <xsl:attribute name="class">
          <xsl:value-of select="$class"/>
        </xsl:attribute>
      </xsl:if>
    </xsl:element>
  </xsl:template>
  
  <xsl:template name="include-bloglist-js">
    <script src="/resources/Bloglist/js/bloglist.js"></script>
  </xsl:template>

  <!-- output a list of years with articles and the amount of articles in that year -->
  <!-- @name: output-year-list
@usage: call-template name="output-year-list"
@params: bloglist (the bloglist node to use)
-->
  <xsl:template name="output-year-list" mode="meta">
    <xsl:param name="bloglist"/>
    <!-- This is kinda hacky. Not actually using a for loop here.
Since <xsl:call-template> does not change our context,
we "force" a context change by passing the bloglist in as
a param and then calling <xsl:for-each> on it. This allows us
to use '.' to access it directly. -->
    <xsl:for-each select="exsl:node-set($bloglist)">
      <!-- We grab all years... -->
      <xsl:variable name="all-years">
        <xsl:for-each select="./blog[not(@archived) or @archived != 'yes']">
          <xsl:element name="year">
            <xsl:call-template name="format-date-blog">
              <xsl:with-param name="format" select="'YYYY'"/>
              <xsl:with-param name="date" select="./@date"/>
            </xsl:call-template>
          </xsl:element>
        </xsl:for-each>
      </xsl:variable>
      <!-- And filter out the unique ones, and count them... -->
      <xsl:variable name="unique-years">
        <xsl:for-each select="exsl:node-set($all-years)/year[not(. = preceding-sibling::year)]">
          <xsl:variable name="this-year" select="."/>
          
          <xsl:element name="year">
            <xsl:attribute name="count">
              <xsl:value-of select="count(exsl:node-set($all-years)/year[text() = $this-year/text()])"/>
            </xsl:attribute>
            
            <xsl:value-of select="."/>
          </xsl:element>
        </xsl:for-each>
      </xsl:variable>
      
      <!--output the list-->
      <ul class="blog-by-year">
        <xsl:for-each select="exsl:node-set($unique-years)/year">  
          <xsl:sort select="." order="descending"/>
          
          <li>
            <xsl:element name="a">
              
              <xsl:attribute name="href">
                <!--                   <xsl:value-of select="$PATH"/> -->
                <xsl:text>#year=</xsl:text>
                <xsl:value-of select="."/>
              </xsl:attribute>
              
              <xsl:attribute name="data-filter-type">
                <xsl:text>year</xsl:text>
              </xsl:attribute>
              
              <xsl:attribute name="data-filter-value">
                <xsl:value-of select="."/>
              </xsl:attribute>
              
              <xsl:value-of select="."/>
              
              <span class="count">
                <xsl:value-of select="'('"/>
                <xsl:value-of select="./@count"/>
                <xsl:value-of select="')'"/>
              </span>
              
            </xsl:element>       
          </li>
          
        </xsl:for-each>
      </ul>
      
    </xsl:for-each>
  </xsl:template>
  
  
  <xsl:template name="output-year-list-from-blog-node" mode="meta">
    <xsl:param name="bloglist"/>
    <!-- This is kinda hacky. Not actually using a for loop here.
Since <xsl:call-template> does not change our context,
we "force" a context change by passing the bloglist in as
a param and then calling <xsl:for-each> on it. This allows us
to use '.' to access it directly. -->
    
    <xsl:for-each select="exsl:node-set($bloglist)">
      <!-- We grab all years... -->
      <xsl:variable name="all-years">
        <xsl:for-each select="./blog[not(@archived) or @archived != 'yes']">
          <xsl:sort select="substring(./@date,7)" order="descending"/>
          
          <xsl:element name="year">
            <xsl:call-template name="format-date-blog">
              <xsl:with-param name="format" select="'YYYY'"/>
              <xsl:with-param name="date" select="./@date"/>
            </xsl:call-template>
          </xsl:element>
          
        </xsl:for-each>
      </xsl:variable>
      
      <!-- And filter out the unique ones, and count them... -->
      <xsl:variable name="unique-years">
        <xsl:for-each select="exsl:node-set($all-years)/year[not(. = preceding-sibling::year)]">
          
          <xsl:variable name="this-year" select="."/>
          
          <xsl:element name="year">
            <xsl:attribute name="count">
              <xsl:value-of select="count(exsl:node-set($all-years)/year[text() = $this-year/text()])"/>
            </xsl:attribute>
            <xsl:value-of select="."/>
          </xsl:element>
          
        </xsl:for-each>
      </xsl:variable>
      
      <!--output the list-->
      <ul class="blog-by-year">
        <xsl:for-each select="exsl:node-set($unique-years)/year">
          
          <xsl:sort select="." order="descending"/>
          
          <li>
            <xsl:element name="a">
              
              <xsl:attribute name="href">
                <xsl:value-of select="$PATH"/>
                <xsl:text>#year=</xsl:text>
                <xsl:value-of select="."/>
              </xsl:attribute>
              
              <xsl:attribute name="data-filter-type">
                <xsl:text>year</xsl:text>
              </xsl:attribute>
              
              <xsl:attribute name="data-filter-value">
                <xsl:value-of select="."/>
              </xsl:attribute>
              
              <xsl:value-of select="."/>
              
              <span class="count">
                <xsl:value-of select="'('"/>
                <xsl:value-of select="./@count"/>
                <xsl:value-of select="')'"/>
              </span>
              
            </xsl:element>   
          </li>
          
        </xsl:for-each>
      </ul>
      
    </xsl:for-each>
  </xsl:template>
  
  
  <xsl:template name="output-tag-list" mode="meta">
    <xsl:param name="bloglist"/>
    <!-- This is kinda hacky. Not actually using a for loop here.
Since <xsl:call-template> does not change our context,
we "force" a context change by passing the bloglist in as
a param and then calling <xsl:for-each> on it. This allows us
to use '.' to access it directly. -->
    <xsl:for-each select="exsl:node-set($bloglist)">
      <!-- We grab all years... -->
      <xsl:variable name="all-tags">
        <xsl:for-each select="./blog[not(@archived) or @archived != 'yes']/tags/tag">
          
          <xsl:element name="tag">
            
            <xsl:attribute name="value">
              <xsl:value-of select="translate(./text(),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
            </xsl:attribute>
            
            <xsl:value-of select="."/>
            
          </xsl:element>
          
        </xsl:for-each>
      </xsl:variable>
      
      <!-- And filter out the unique ones, and count them... -->
      <xsl:variable name="unique-tags">
        <xsl:for-each select="exsl:node-set($all-tags)/tag[not(./@value = preceding-sibling::tag/@value)]">
          <xsl:variable name="this-tag" select="."/>
          
          <xsl:element name="tag">
            <xsl:attribute name="count">
              <xsl:value-of select="count(exsl:node-set($all-tags)/tag[./@value = $this-tag/@value])"/>
            </xsl:attribute>
            <xsl:value-of select="."/>
          </xsl:element>
          
        </xsl:for-each>
      </xsl:variable>
      
      <!--output the list-->
      <ul class="blog-by-tag">
        <xsl:for-each select="exsl:node-set($unique-tags)/tag">
          <xsl:if test="./text()">
            
            <li>
              <xsl:element name="a">
                
                <xsl:attribute name="href">
                  <!--                   <xsl:value-of select="$PATH"/> -->
                  <xsl:text>#tag=</xsl:text>
                  <xsl:value-of select="."/>
                </xsl:attribute>
                
                <xsl:attribute name="data-filter-type">
                  <xsl:text>tag</xsl:text>
                </xsl:attribute>
                
                <xsl:attribute name="data-filter-value">
                  <xsl:value-of select="."/>
                </xsl:attribute>
                
                <xsl:value-of select="."/>
                
                <span class="count">
                  <xsl:value-of select="'('"/>
                  <xsl:value-of select="./@count"/>
                  <xsl:value-of select="')'"/>
                </span>
                
              </xsl:element>
            </li>
            
          </xsl:if>
        </xsl:for-each>
      </ul>
    </xsl:for-each>
  </xsl:template>
  
  
  <xsl:template name="output-tag-list-from-blog-node" mode="meta">
    <xsl:param name="bloglist"/>
    <!-- This is kinda hacky. Not actually using a for loop here.
Since <xsl:call-template> does not change our context,
we "force" a context change by passing the bloglist in as
a param and then calling <xsl:for-each> on it. This allows us
to use '.' to access it directly. -->
    <xsl:for-each select="exsl:node-set($bloglist)">
      <!-- We grab all years... -->
      <xsl:variable name="all-tags">
        <xsl:for-each select="./blog/tags/tag">
          
          <xsl:element name="tag">
            <xsl:attribute name="value">
              <xsl:value-of select="translate(./text(),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
            </xsl:attribute>
            
            <xsl:value-of select="."/>
          </xsl:element>
          
        </xsl:for-each>
      </xsl:variable>
      
      <!-- And filter out the unique ones, and count them... -->
      <xsl:variable name="unique-tags">
        <xsl:for-each select="exsl:node-set($all-tags)/tag[not(./@value = preceding-sibling::tag/@value)]">
          <xsl:variable name="this-tag" select="."/>
          
          <xsl:element name="tag">
            <xsl:attribute name="count">
              <xsl:value-of select="count(exsl:node-set($all-tags)/tag[./@value = $this-tag/@value])"/>
            </xsl:attribute>
            
            <xsl:value-of select="."/>
          </xsl:element>
          
        </xsl:for-each>
      </xsl:variable>
      
      <!--output the list-->
      <ul class="blog-by-tag">
        <xsl:for-each select="exsl:node-set($unique-tags)/tag">
          <xsl:if test="./text()">
            
            <li>
              <xsl:element name="a">
                <xsl:attribute name="href">
                  <xsl:value-of select="$PATH"/>
                  <xsl:text>#tag=</xsl:text>
                  <xsl:value-of select="."/>
                </xsl:attribute>
                
                <xsl:attribute name="data-filter-type">
                  <xsl:text>tag</xsl:text>
                </xsl:attribute>
                
                <xsl:attribute name="data-filter-value">
                  <xsl:value-of select="."/>
                </xsl:attribute>
                
                <xsl:value-of select="."/>
                
                <span class="count">
                  <xsl:value-of select="'('"/>
                  <xsl:value-of select="./@count"/>
                  <xsl:value-of select="')'"/>
                </span>
              </xsl:element>
            </li>
            
          </xsl:if>
        </xsl:for-each>
      </ul>
    </xsl:for-each>
  </xsl:template>
  
  
  <xsl:template name="output-category-list" mode="meta">

    <xsl:param name="bloglist"/>
    <!-- This is kinda hacky. Not actually using a for loop here.
Since <xsl:call-template> does not change our context,
we "force" a context change by passing the bloglist in as
a param and then calling <xsl:for-each> on it. This allows us
to use '.' to access it directly. -->
    <xsl:for-each select="exsl:node-set($bloglist)">
      <!-- we define $uppercase and $lowercase variables for our hack
to convert strings to lowercase 
example call to convert a string to lowercase (within a select statement:
translate('CONVERT this TO ALL loWeRcase', $uppercase, $lowercase) -->
      
      <xsl:variable name="uppercase" value="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>
      
      <xsl:variable name="lowercase" value="'abcdefghijklmnopqrstuvwxyz'"/>
      
      <xsl:variable name="lowercase-duplicate-main-categories-with-duplicate-sub-categories">
        <xsl:for-each select="./blog[not(@archived) or @archived !='yes']/categories">
          <xsl:choose>
            <xsl:when test="./main-category and ./category">
              
              <!--main-category with sub-categories -->
              <xsl:element name="main-category">
                <xsl:variable name="main-category-value" select="./main-category/text()"/>
                <xsl:attribute name="value">
                  <xsl:value-of select="translate($main-category-value,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
                </xsl:attribute>
                
                <xsl:value-of select="./main-category"/>
                
                <xsl:for-each select="./category">
                  <xsl:element name="category">
                    <xsl:attribute name="value">
                      <xsl:value-of select="translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
                    </xsl:attribute>
                    
                    <xsl:value-of select="."/>
                  </xsl:element>
                  
                </xsl:for-each>
              </xsl:element>
              
            </xsl:when>
            
            <xsl:when test="./main-category">
              <!--main-category with no sub-categories -->
              <xsl:element name="main-category">
                <xsl:attribute name="value">
                  <xsl:value-of select="translate(./main-category,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
                </xsl:attribute>
                <xsl:value-of select="./main-category"/>
              </xsl:element>
            </xsl:when>
            
            <xsl:otherwise>
              <!-- pull in category and give it a value attribute -->
              <xsl:for-each select="./category">
                <xsl:element name="category">
                  <xsl:attribute name="value">
                    <xsl:value-of select="translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
                  </xsl:attribute>
                  
                  <xsl:value-of select="."/>
                </xsl:element>
                
              </xsl:for-each>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-unique-top-level-categories">
        <xsl:for-each select="exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)/category[not(./@value = preceding-sibling::category/@value)]">
          <xsl:copy-of select="."/>
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-unique-counted-main-categories">
        <xsl:for-each select="exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)/main-category[not(./@value = preceding-sibling::main-category/@value)]">
          <xsl:variable name="this-main-category" select="."/>
          
          <xsl:element name="main-category">
            <xsl:attribute name="value">
              <xsl:value-of select="./@value"/>
            </xsl:attribute>
            
            <xsl:attribute name="count">
              <xsl:value-of select="count(exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)/main-category[./@value = $this-main-category/@value])"/>
            </xsl:attribute>
            
            <xsl:value-of select="./text()"/>
          </xsl:element>
          
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-duplicate-categories">
        <xsl:for-each select="exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)//category">
          <xsl:copy-of select="."/>
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-unique-counted-categories">
        <xsl:for-each select="exsl:node-set($lowercase-duplicate-categories)//category[not(./@value = preceding-sibling::category/@value)]">
          <xsl:variable name="this-category" select="."/>
          
          <xsl:element name="category">
            <xsl:attribute name="value">
              <xsl:value-of select="./@value"/>
            </xsl:attribute>
            
            <xsl:attribute name="count">
              <xsl:value-of select="count(exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)//category[./@value = $this-category/@value])"/>
            </xsl:attribute>
            
            <xsl:value-of select="./text()"/>
          </xsl:element>
          
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-unique-counted-main-categories-with-unique-sub-categories">
        <xsl:for-each select="exsl:node-set($lowercase-unique-counted-main-categories)/main-category">
          <xsl:variable name="this-main-category" select="."/>
          
          <xsl:element name="main-category">
            <xsl:attribute name="value">
              <xsl:value-of select="./@value"/>
            </xsl:attribute>
            
            <xsl:attribute name="count">
              <xsl:value-of select="./@count"/>
            </xsl:attribute>
            
            <xsl:value-of select="."/>
            
            <xsl:for-each select="exsl:node-set($lowercase-unique-counted-categories)/category">
              <xsl:variable name="this-category" select="."/>
              
              <xsl:if test="exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)/main-category[./@value = $this-main-category/@value]/category[./@value = $this-category/@value]">
                
                <xsl:element name="category">
                  <xsl:attribute name="value">
                    <xsl:value-of select="$this-category/@value"/>
                  </xsl:attribute>
                  
                  <xsl:attribute name="count">
                    <xsl:value-of select="$this-category/@count"/>
                  </xsl:attribute>
                  
                  <xsl:value-of select="$this-category"/>
                </xsl:element>
                
              </xsl:if>
            </xsl:for-each>
          </xsl:element>
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-unique-counted-top-level-categories">
        <xsl:for-each select="exsl:node-set($lowercase-unique-top-level-categories)/category">
          <xsl:variable name="this-category" select="."/>
          <xsl:copy-of select="exsl:node-set($lowercase-unique-counted-categories)/category[./@value = $this-category/@value]"/>
        </xsl:for-each>
      </xsl:variable>
      
      <!--output the list-->
      <ul class="blog-by-category">
        <xsl:for-each select="exsl:node-set($lowercase-unique-counted-main-categories-with-unique-sub-categories)/main-category">
          <xsl:if test="./text()">
            <li>
              <xsl:call-template name="category-list-link"/>
              
              <xsl:if test="./category">
                <ul>
                  <xsl:for-each select="./category">
                    <li>                       
                      <xsl:call-template name="category-list-link"/>
                    </li>
                  </xsl:for-each>
                </ul>
              </xsl:if>

            </li>
          </xsl:if>
        </xsl:for-each>
        <xsl:for-each select="exsl:node-set($lowercase-unique-counted-top-level-categories)">
          <xsl:if test="./text()">
            <li>
              <xsl:call-template name="category-list-link"/>
            </li>
          </xsl:if>
        </xsl:for-each>
      </ul>
    </xsl:for-each>
  </xsl:template>
  
  
  <xsl:template name="output-category-list-from-blog-node" mode="meta">

    <xsl:param name="bloglist"/>
    <!-- This is kinda hacky. Not actually using a for loop here.
Since <xsl:call-template> does not change our context,
we "force" a context change by passing the bloglist in as
a param and then calling <xsl:for-each> on it. This allows us
to use '.' to access it directly. -->
    <xsl:for-each select="exsl:node-set($bloglist)">
      <!-- we define $uppercase and $lowercase variables for our hack
to convert strings to lowercase 
example call to convert a string to lowercase (within a select statement:
translate('CONVERT this TO ALL loWeRcase', $uppercase, $lowercase) -->
      <xsl:variable name="uppercase" value="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>
      <xsl:variable name="lowercase" value="'abcdefghijklmnopqrstuvwxyz'"/>
      <xsl:variable name="lowercase-duplicate-main-categories-with-duplicate-sub-categories">
        <xsl:for-each select="./blog/categories">
          <xsl:choose>
            <xsl:when test="./main-category and ./category">
              <!--main-category with sub-categories -->
              
              <xsl:element name="main-category">
                <xsl:variable name="main-category-value" select="./main-category/text()"/>
                <xsl:attribute name="value">
                  <xsl:value-of select="translate($main-category-value,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
                </xsl:attribute>
                <xsl:value-of select="./main-category"/>
                <xsl:for-each select="./category">
                  
                  <xsl:element name="category">
                    <xsl:attribute name="value">
                      <xsl:value-of select="translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
                    </xsl:attribute>
                    <xsl:value-of select="."/>
                  </xsl:element>
                </xsl:for-each>
              </xsl:element>
              
            </xsl:when>
            
            <xsl:when test="./main-category">
              
              <!--main-category with no sub-categories -->
              <xsl:element name="main-category">
                <xsl:attribute name="value">
                  <xsl:value-of select="translate(./main-category,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
                </xsl:attribute>
                <xsl:value-of select="./main-category"/>
              </xsl:element>
              
            </xsl:when>
            
            <xsl:otherwise>
              <!-- pull in category and give it a value attribute -->
              <xsl:for-each select="./category">
                
                <xsl:element name="category">
                  <xsl:attribute name="value">
                    <xsl:value-of select="translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
                  </xsl:attribute>
                  <xsl:value-of select="."/>
                </xsl:element>
                
              </xsl:for-each>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-unique-top-level-categories">
        <xsl:for-each select="exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)/category[not(./@value = preceding-sibling::category/@value)]">
          <xsl:copy-of select="."/>
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-unique-counted-main-categories">
        <xsl:for-each select="exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)/main-category[not(./@value = preceding-sibling::main-category/@value)]">
          <xsl:variable name="this-main-category" select="."/>
          
          <xsl:element name="main-category">
            <xsl:attribute name="value">
              <xsl:value-of select="./@value"/>
            </xsl:attribute>
            
            <xsl:attribute name="count">
              <xsl:value-of select="count(exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)/main-category[./@value = $this-main-category/@value])"/>
            </xsl:attribute>
            
            <xsl:value-of select="./text()"/>
          </xsl:element>
          
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-duplicate-categories">
        <xsl:for-each select="exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)//category">
          <xsl:copy-of select="."/>
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-unique-counted-categories">
        <xsl:for-each select="exsl:node-set($lowercase-duplicate-categories)//category[not(./@value = preceding-sibling::category/@value)]">
          <xsl:variable name="this-category" select="."/>
          
          <xsl:element name="category">
            <xsl:attribute name="value">
              <xsl:value-of select="./@value"/>
            </xsl:attribute>
            
            <xsl:attribute name="count">
              <xsl:value-of select="count(exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)//category[./@value = $this-category/@value])"/>
            </xsl:attribute>
            <xsl:value-of select="./text()"/>
          </xsl:element>
          
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-unique-counted-main-categories-with-unique-sub-categories">
        <xsl:for-each select="exsl:node-set($lowercase-unique-counted-main-categories)/main-category">
          <xsl:variable name="this-main-category" select="."/>
          
          <xsl:element name="main-category">
            <xsl:attribute name="value">
              <xsl:value-of select="./@value"/>
            </xsl:attribute>
            
            <xsl:attribute name="count">
              <xsl:value-of select="./@count"/>
            </xsl:attribute>
            
            <xsl:value-of select="."/>
            <xsl:for-each select="exsl:node-set($lowercase-unique-counted-categories)/category">
              <xsl:variable name="this-category" select="."/>
              <xsl:if test="exsl:node-set($lowercase-duplicate-main-categories-with-duplicate-sub-categories)/main-category[./@value = $this-main-category/@value]/category[./@value = $this-category/@value]">
                
                <xsl:element name="category">
                  <xsl:attribute name="value">
                    <xsl:value-of select="$this-category/@value"/>
                  </xsl:attribute>
                  
                  <xsl:attribute name="count">
                    <xsl:value-of select="$this-category/@count"/>
                  </xsl:attribute>
                  
                  <xsl:value-of select="$this-category"/>
                </xsl:element>
                
              </xsl:if>
            </xsl:for-each>
          </xsl:element>
          
        </xsl:for-each>
      </xsl:variable>

      <xsl:variable name="lowercase-unique-counted-top-level-categories">
        <xsl:for-each select="exsl:node-set($lowercase-unique-top-level-categories)/category">
          <xsl:variable name="this-category" select="."/>
          <xsl:copy-of select="exsl:node-set($lowercase-unique-counted-categories)/category[./@value = $this-category/@value]"/>
        </xsl:for-each>
      </xsl:variable>
      
      <!--output the list-->
      <ul class="blog-by-category">
        <xsl:for-each select="exsl:node-set($lowercase-unique-counted-main-categories-with-unique-sub-categories)/main-category">
          
          <xsl:if test="./text()">
            
            <li>

              <xsl:call-template name="category-list-link">
                <xsl:with-param name="path" select="$PATH"/>
              </xsl:call-template>
              
              
              <xsl:if test="./category">
                <ul>
                  <xsl:for-each select="./category">
                    <li>

                      <xsl:call-template name="category-list-link">
                        <xsl:with-param name="path" select="$PATH"/>
                      </xsl:call-template>
                    </li>
                  </xsl:for-each>
                </ul>
              </xsl:if>

            </li>
          </xsl:if>
        </xsl:for-each>
        
        <xsl:for-each select="exsl:node-set($lowercase-unique-counted-top-level-categories)">
         
          <xsl:if test="./text()">
            <li>
               <xsl:call-template name="category-list-link"/>     
            </li>
          </xsl:if>

        </xsl:for-each>
        
      </ul>
    </xsl:for-each>
  </xsl:template>




  <xsl:template match="bloglist" mode="default">

    <!-- variable definitions -->

    <xsl:variable name="max-items">
      <xsl:choose>
        <xsl:when test="./@index='10-most-recent'"><xsl:value-of select="number(10)"/></xsl:when>
        <xsl:when test="./@index='5-most-recent'"><xsl:value-of select="number(5)"/></xsl:when>
        <xsl:when test="./@index='most-recent'"><xsl:value-of select="number(1)"/></xsl:when>
        <xsl:when test="./@index='list-none'"><xsl:value-of select="number(0)"/></xsl:when>
        <xsl:when test="./@index='breaking-blog-only'"><xsl:value-of select="count(blog[@priority='breaking-blog' and (not(@archived) or @archived!='yes')])"/></xsl:when>
        <xsl:when test="./@index='frontpage-only'"><xsl:value-of select="count(blog[@priority='frontpage' and (not(@archived) or @archived!='yes')])"/></xsl:when>
        <xsl:otherwise><xsl:value-of select="count(blog[not(@archived) or @archived!='yes'])"/></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <!-- get the path for each page link -->

    <xsl:variable name="chapter_id" select="../@id"/>
    <xsl:variable name="path">
      <xsl:call-template name="create_xpath_to_node_blog">
        <xsl:with-param name="node_id" select="$chapter_id"/>
        <xsl:with-param name="web_root" select="//pages"/>
      </xsl:call-template>
    </xsl:variable>
    <!--<xsl:variable name="blog-base-link" select="concat('?',$path)"/>-->
    <xsl:variable name="blog-base-link">
      <xsl:choose>
        <xsl:when test="./@enable-individual-page='no' or ./enable-individual-page=''">
          <xsl:value-of select="''"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="concat('https://bddc.webpal.net/web?path=',substring-after($path, '/'))"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <!-- determine if we are displaying just a regular list of items or with the images -->
    <xsl:variable name="made">
      <xsl:choose>
        <xsl:when test="./@style='default'">
          <xsl:text>page</xsl:text>
        </xsl:when>
        <xsl:when test="./@style='image'">
          <xsl:text>image</xsl:text>
        </xsl:when>
      </xsl:choose>
    </xsl:variable>

    <!-- end of variable definitions -->

    <!-- get a new bloglist node with new attributes for easier styling -->
    <xsl:variable name="new-bloglist-tree">
      <xsl:apply-templates select="." mode="pre-process">
        <xsl:with-param name="max-items" select="$max-items"/>
        <xsl:with-param name="index" select="./@index"/>
        <xsl:with-param name="blog-base-link" select="$blog-base-link"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="@archive='yes'">
      </xsl:when>
      <xsl:when test="$max-items=0">
        <!-- no blog avail. or no items allowed -->
        <xsl:processing-instruction name="php">
          echo '&lt;div class="message"&gt;';
          if (WebPal::language() === 'fr' ){
          echo "Actuellement, il n'ya pas de nouvelles.";
          } else {
          echo "There is no item at the moment.";
          }
          echo "&lt;/div&gt;";
        </xsl:processing-instruction>
      </xsl:when>
      <xsl:otherwise>
        <!-- render page -->
        <xsl:variable name="new-bloglist" select="exsl:node-set($new-bloglist-tree)/bloglist"/>
        <!-- get attribute name for sorting -->
        <xsl:variable name="sort-by">
          <xsl:choose>
            <xsl:when test="$new-bloglist/blog[1]/@*[name()!=@index-sort]"><xsl:value-of select="'date'"/></xsl:when>
            <xsl:otherwise><xsl:value-of select="$new-bloglist/@index-sort"/></xsl:otherwise>
          </xsl:choose>
        </xsl:variable>

        <xsl:element name="ul">
          <xsl:element name="li">
            <xsl:if test="$x_page">
              <xsl:value-of select="$x_page"/>
            </xsl:if>
          </xsl:element>
        </xsl:element>        

        <xsl:element name="ul">
          <xsl:attribute name="id">
            <xsl:value-of select="$new-bloglist/@name"/>
          </xsl:attribute>
          <xsl:attribute name="style">
            <xsl:text>visibility:hidden; list-style: none; padding-left: 0;</xsl:text>
          </xsl:attribute>
          <xsl:choose>
            <xsl:when test="./@style='default'">
              <xsl:choose>
                <xsl:when test="$new-bloglist/@index='breaking-blog-first'">
                  <!--
when 'breaking-blog-first' selected,
add sorting by priority number as an extra sort criteria
-->
                  <xsl:apply-templates select="$new-bloglist/blog" mode="page">
                    <xsl:sort order="descending" select="@priority-number"/>
                    <xsl:sort order="{@sort-order}" select="@*[name()=$sort-by]"/>
                    <xsl:with-param name="max-items" select="$new-bloglist/@max-items"/>
                    <xsl:with-param name="items-per-page" select="$new-bloglist/@items-per-page"/>
                    <xsl:with-param name="number-of-pages" select="ceiling(count($new-bloglist/blog) div $new-bloglist/@items-per-page)"/>
                    <xsl:with-param name="layout" select="$new-bloglist/@layout"/>
                    <xsl:with-param name="date-format" select="$new-bloglist/@date-format"/>
                  </xsl:apply-templates>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:apply-templates select="$new-bloglist/blog" mode="page">
                    <xsl:sort order="{@sort-order}" select="@*[name()=$sort-by]"/>
                    <xsl:with-param name="max-items" select="$new-bloglist/@max-items"/>
                    <xsl:with-param name="items-per-page" select="$new-bloglist/@items-per-page"/>
                    <xsl:with-param name="number-of-pages" select="ceiling(count($new-bloglist/blog) div $new-bloglist/@items-per-page)"/>
                    <xsl:with-param name="layout" select="$new-bloglist/@layout"/>
                    <xsl:with-param name="date-format" select="$new-bloglist/@date-format"/>
                  </xsl:apply-templates>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:when test="./@style='image'">
              <xsl:choose>
                <xsl:when test="$new-bloglist/@index='breaking-blog-first'">
                  <!--
when 'breaking-blog-first' selected,
add sorting by priority number as an extra sort criteria
-->
                  <xsl:apply-templates select="$new-bloglist/blog" mode="image">
                    <xsl:sort order="descending" select="@priority-number"/>
                    <xsl:sort order="{@sort-order}" select="@*[name()=$sort-by]"/>
                    <xsl:with-param name="max-items" select="$new-bloglist/@max-items"/>
                    <xsl:with-param name="items-per-page" select="$new-bloglist/@items-per-page"/>
                    <xsl:with-param name="number-of-pages" select="ceiling(count($new-bloglist/blog) div $new-bloglist/@items-per-page)"/>
                    <xsl:with-param name="layout" select="$new-bloglist/@layout"/>
                    <xsl:with-param name="date-format" select="$new-bloglist/@date-format"/>
                  </xsl:apply-templates>
                </xsl:when>
                
                <xsl:otherwise>
                  <xsl:apply-templates select="$new-bloglist/blog" mode="image">
                    <xsl:sort order="{@sort-order}" select="@*[name()=$sort-by]"/>
                    <xsl:with-param name="max-items" select="$new-bloglist/@max-items"/>
                    <xsl:with-param name="items-per-page" select="$new-bloglist/@items-per-page"/>
                    <xsl:with-param name="number-of-pages" select="ceiling(count($new-bloglist/blog) div $new-bloglist/@items-per-page)"/>
                    <xsl:with-param name="layout" select="$new-bloglist/@layout"/>
                    <xsl:with-param name="date-format" select="$new-bloglist/@date-format"/>
                  </xsl:apply-templates>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
          </xsl:choose>

        </xsl:element>
        
        <!--<div class="pagination compact-theme simple-pagination"></div>-->

        <div class="row filterRow">
          <div class="col-xs-12 pages">
            <div class="blog_list_selector paging"></div>
            <!-- <div class="col-sm-6 blog_list_details"></div> -->
          </div>
        </div> <!-- end of row -->

        <xsl:variable name="containerID" select="concat('&quot;',$new-bloglist/@name,'&quot;')"/>

        <script type="text/javascript">
          $(window).load(function() {
          var bloglist = "#" + <xsl:value-of select="$containerID"/>;
          var $containerID = <xsl:value-of select="$containerID"/>;
          var lang = '<xsl:processing-instruction name="php">echo WebPal::language();</xsl:processing-instruction>';

          $(bloglist).css('visibility','visible');
          /*$("div.pagination").jPages({
          containerID  : $containerID,
          perPage      : $perPage,
          startPage    : 1,
          startRange   : 1,
          midRange     : 5,
          endRange     : 1
          });*/

          var $pageSelector = $("div.blog_list_selector");

          // jPages init
          $pageSelector.jPages(
          {
          containerID  : $containerID,
          perPage      : <xsl:value-of select='$new-bloglist/@items-per-page'/>,
          startPage    : 1,
          startRange   : 1,
          midRange     : 5,
          endRange     : 1,
          callback     :
          function(pages, items)
          {
          var range = items.range;

          if (lang == 'fr') {
          $pageSelector.siblings("div.blog_list_details").empty()
          .html("Résultats " + Number(range.start) + " à " + Number(range.end) + " (sur " + Number(items.count) + ")");
          } else {
          $pageSelector.siblings("div.blog_list_details").empty()
          .html("Showing " + Number(range.start) + " - " + Number(range.end) + " of " + Number(items.count));
          }

          $(bloglist + ' li').css('border-bottom', '1px solid #C3C8C8');
          $(bloglist + ' li').last().css('border-bottom', 'none');

          var i = 0;

          $(bloglist + ' li').each(
          function()
          {
          if (++i % <xsl:value-of select='$new-bloglist/@items-per-page'/> == 0)
          {
          $(this).last().css('border-bottom', 'none');
          }
          }
          );
          }
          }
          );

          var $perPage = $(".blog_perPage_filter");
          var $perPageBtn = $perPage.find(".filter a");

          $perPageBtn.click(
          function()
          {
          var pageLimit = $(this).attr('data-value');

          if (pageLimit)
          {
          $pageSelector.jPages("destroy").jPages(
          {
          containerID  : $containerID,
          perPage      : pageLimit,
          startPage    : 1,
          startRange   : 1,
          midRange     : 5,
          endRange     : 1,
          callback	   :
          function(pages, items)
          {
          var range = items.range;

          if (lang == 'fr') {
          $pageSelector.siblings("div.blog_list_details").empty()
          .html("Résultats " + Number(range.start) + " à " + Number(range.end) + " (sur " + Number(items.count) + ")");
          } else {
          $pageSelector.siblings("div.blog_list_details").empty()
          .html("Showing " + Number(range.start) + " - " + Number(range.end) + " of " + Number(items.count));
          }

          $(bloglist + ' li').css('border-bottom', '1px solid #C3C8C8');
          $(bloglist + ' li').last().css('border-bottom', 'none');

          var i = 0;

          $(bloglist + ' li').each(
          function()
          {
          if (++i % pageLimit == 0)
          {
          $(this).last().css('border-bottom', 'none');
          }
          }
          );
          }
          }
          );
          }
          }
          );
          });

        </script>

      </xsl:otherwise>
    </xsl:choose>

  </xsl:template>

  <!-- ========================================================================================= -->
  <!-- ================================= bloglist page templates =============================== -->
  <!-- ========================================================================================= -->

  <xsl:template match="blog" mode="page">
    <xsl:param name="max-items"/>
    <xsl:param name="items-per-page"/>
    <xsl:param name="number-of-pages"/>
    <xsl:param name="layout"/>
    <xsl:param name="date-format"/>

    <xsl:if test="position() &lt;= $max-items">

      <li>
        <div class="meta meta-date">
          <!-- date here -->
          <xsl:if test="contains($layout,'date')">
            <xsl:variable name="formatted-date">
              <xsl:call-template name="format-date-blog">
                <xsl:with-param name="format" select="$date-format"/>
                <xsl:with-param name="date" select="./@date"/>
              </xsl:call-template>
            </xsl:variable>
            
            <xsl:choose>
              <xsl:when test="$date-format='custom_M_d'">
                <xsl:copy-of select="$formatted-date"/>
              </xsl:when>
              
              <xsl:otherwise>
                <xsl:value-of select="$formatted-date"/>
              </xsl:otherwise>
              
            </xsl:choose>

          </xsl:if>
        </div>
        <!-- title here -->
        <h2 class="meta-title">
          <xsl:if test="./@link">
            <xsl:text disable-output-escaping="yes">&lt;a href="</xsl:text>
            <xsl:value-of select="./@link"/>
            <xsl:text disable-output-escaping="yes">" rel="bookmark" title="</xsl:text>
            <xsl:value-of select="title"/>
            <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
          </xsl:if>
          
          <xsl:value-of select="title"/>
          
          <xsl:if test="./@link">
            <xsl:text disable-output-escaping="yes">&lt;/a&gt;</xsl:text>
          </xsl:if>
        </h2>

        <div class="meta meta-author">
          <!-- author here -->
          <xsl:if test="author">
            <xsl:value-of select="author"/>
          </xsl:if>
        </div>

        <!-- description here -->
        <xsl:if test="contains($layout,'synopsis')">
          <div class="hidden-xs entry-synopsis"><xsl:value-of select="synopsis"/><xsl:text disable-output-escaping="yes"> </xsl:text>
            <xsl:if test="./@link">
              <xsl:text disable-output-escaping="yes">&lt;a href="</xsl:text>
              <xsl:value-of select="./@link"/>
              <xsl:text disable-output-escaping="yes">" rel="bookmark" class="blogReadMore"&gt;</xsl:text>
              <xsl:processing-instruction name="php">
                if (WebPal::language() === 'fr' ){
                echo "En savoir plus ";
                } else {
                echo "Read more ";
                }
              </xsl:processing-instruction>
              <xsl:text disable-output-escaping="yes">&lt;i class="fa fa-angle-double-right"&gt;&lt;/i&gt; &lt;/a&gt;</xsl:text>
            </xsl:if>
          </div>
        </xsl:if>


        <!-- content here -->
        <xsl:if test="contains($layout,'text')">
          <div class="entry">      
              <xsl:apply-templates select="text" />
            <!--<img alt="" data-file-id="imgD9miHeVA7Y5n.jpg" data-original="?f=imgD9miHeVA7Y5n.jpg&amp;_dm_id=imgD9miHeVA7Y5n.jpg" style=";" class="img-responsive lazy" />-->         
          </div>
          
        </xsl:if>
        <!--   /content        -->
      </li>
    </xsl:if>
    
    
  </xsl:template>

  
  <xsl:template match="blog" mode="image">
    <xsl:param name="max-items"/>
    <xsl:param name="items-per-page"/>
    <xsl:param name="number-of-pages"/>
    <xsl:param name="layout"/>
    <xsl:param name="date-format"/>

    <xsl:variable name="article_text" select="."/>
    <xsl:if test="position() &lt;= $max-items">

      <xsl:element name="li">
        <xsl:attribute name="class">
          <xsl:text>list-item</xsl:text>
        </xsl:attribute>

        <!-- element format of the blog post
details
|-summary
|-a - h2 - title
|-div.meta
|-date
|-author
|-categories
|-tags
|-div.image
|-image
|-div.content
|-content
-->
        <xsl:element name="details">
          
          <!-- summary shows while the post is collapsed -->
          <xsl:element name="summary">
            
            <!-- title (mandatory) -->
            <xsl:element name="div">
              <xsl:attribute name="class">
                <xsl:text>meta-title</xsl:text>
              </xsl:attribute>
              
              <xsl:choose>
                <xsl:when test="./@link">
                  
                  <xsl:element name="a">
                    <xsl:attribute name="href">
                      <xsl:value-of select="./@link"/>
                    </xsl:attribute>
                    
                    <xsl:attribute name="rel">
                      <xsl:text>bookmark</xsl:text>
                    </xsl:attribute>
                    
                    <xsl:attribute name="title">
                      <xsl:value-of select="./title"/>
                    </xsl:attribute>
                    
                    <h2>
                      <xsl:value-of select="./title"/>
                    </h2>
                    
                  </xsl:element>
                  
                </xsl:when>
                
                <xsl:otherwise>
                  <h2>
                    <xsl:value-of select="./title"/>
                  </h2>
                </xsl:otherwise>
                
              </xsl:choose>
            </xsl:element>
            
            <!-- meta -->
            <xsl:element name="div">
              <xsl:attribute name="class">
                <xsl:text>meta</xsl:text>
              </xsl:attribute>

              <!-- date -->
              <xsl:element name="div">
                <xsl:attribute name="class">
                  <xsl:text>meta-date</xsl:text>
                </xsl:attribute>
                
                <xsl:if test="contains($layout,'date')">
                  
                  <xsl:variable name="formatted-date">
                    <xsl:call-template name="format-date-blog">
                      <xsl:with-param name="format" select="$date-format"/>
                      <xsl:with-param name="date" select="./@date"/>
                    </xsl:call-template>
                  </xsl:variable>
                  
                  <xsl:choose>
                    
                    <xsl:when test="$date-format='custom_M_d'">
                      <!-- The custom date returns rendered html, so we want a copy rather than just the value -->
                      <xsl:copy-of select="$formatted-date"/>
                    </xsl:when>
                    
                    <xsl:otherwise>
                      <xsl:value-of select="$formatted-date"/>
                    </xsl:otherwise>
                    
                  </xsl:choose>
                  
                </xsl:if>
                
              </xsl:element>
              
              <!-- author -->
              <xsl:element name="div">
                <xsl:attribute name="class">
                  <xsl:text>meta-author</xsl:text>
                </xsl:attribute>
              </xsl:element>
              
              <!-- categories -->
              <xsl:if test="count(./categories/*) &gt; 0">
                
                <xsl:element name="ul">
                  <xsl:for-each select="./categories/*">
                    
                    <xsl:element name="li">
                      <xsl:attribute name="class">
                        <xsl:text>category</xsl:text>
                      </xsl:attribute>
                      
                      <xsl:value-of select="."/>
                    </xsl:element>
                    
                  </xsl:for-each>
                </xsl:element>
                
              </xsl:if>
              <!-- tags -->
              <xsl:if test="count(./tags/*) &gt; 0">
                
                <xsl:element name="ul">
                  <xsl:for-each select="./tags/*">
                    
                    <xsl:element name="li">
                      <xsl:attribute name="class">
                        <xsl:text>tag</xsl:text>
                      </xsl:attribute>
                      
                      <xsl:value-of select="."/>
                    </xsl:element>
                    
                  </xsl:for-each>
                </xsl:element>
                
              </xsl:if>
            </xsl:element>
            
            <!-- image -->
            <xsl:element name="div">
              <xsl:attribute name="class">
                <xsl:text>item-image</xsl:text>
              </xsl:attribute>
              
              <!--           <xsl:element name="img">
<xsl:attribute name="src">
<xsl:text>?ft=</xsl:text>
<xsl:value-of select="./image/@src"/>
</xsl:attribute>
<xsl:attribute name="class">
<xsl:text>thumbnail</xsl:text>
</xsl:attribute>
<xsl:attribute name="style">
<xsl:text>width: 100px; height: 100px;</xsl:text>
</xsl:attribute>
</xsl:element> -->
            </xsl:element>
            
            <!-- summary content -->
            <xsl:element name="p">
              <xsl:attribute name="class">summary</xsl:attribute>
              <xsl:value-of select="concat(substring($article_text, 0, 100), '...')"/>
            </xsl:element>
            
            <!-- read more link -->
            <xsl:element name="div">
              <xsl:attribute name="class">
                <xsl:text>read-more</xsl:text>
              </xsl:attribute>
              
              <xsl:element name="a">
                <xsl:text>Read More</xsl:text>
              </xsl:element>
              
            </xsl:element>
            
          </xsl:element>
          
          <!-- content shows while the post is expanded -->
          <xsl:element name="content">
            
            <xsl:element name="div">
              <xsl:attribute name="class">content</xsl:attribute>
              <xsl:apply-templates select="text"/>
            </xsl:element>
            
          </xsl:element>
          
        </xsl:element>
        
      </xsl:element>
    </xsl:if>
  </xsl:template>

  
  <xsl:template match="blog[@upcoming='yes']" mode="upcoming">
    <xsl:param name="max-items"/>
    <xsl:param name="items-per-page"/>
    <xsl:param name="number-of-pages"/>
    <xsl:param name="layout"/>
    <xsl:param name="date-format"/>
    <xsl:param name="blog-base-link"/>
    <xsl:variable name="blog-text">
      <xsl:variable name="text">
        <xsl:apply-templates select="./text"/>
      </xsl:variable>
      
      <xsl:for-each select="exsl:node-set($text)/*">
        <xsl:value-of select="."/>
        <xsl:if test="string-length(.)=0">
          <xsl:text>. </xsl:text>
        </xsl:if>
      </xsl:for-each>
    </xsl:variable>
    
    <xsl:variable name="blog-summary">
      <xsl:value-of select="concat(substring($blog-text, 0, 100), '...')"/>
    </xsl:variable>
    
    <xsl:if test="position() &lt;= $max-items">

      <li>
        <div class="meta meta-date">
          <!-- date here -->
          <xsl:if test="contains($layout,'date')">
            
            <xsl:variable name="formatted-date">
              <xsl:call-template name="format-date-blog">
                <xsl:with-param name="format" select="$date-format"/>
                <xsl:with-param name="date" select="./@date"/>
              </xsl:call-template>
            </xsl:variable>
            
            <xsl:choose>
              <xsl:when test="$date-format='custom_M_d'">
                <xsl:copy-of select="$formatted-date"/>
              </xsl:when>
              
              <xsl:otherwise>
                <xsl:value-of select="$formatted-date"/>
              </xsl:otherwise>
            </xsl:choose>

          </xsl:if>
        </div>
        <!-- title here -->
        <h2 class="meta-title">
          <!--           <xsl:if test="./@link"> -->
          <xsl:if test="$blog-base-link and @name">
            <xsl:text disable-output-escaping="yes">&lt;a href="</xsl:text>
            <xsl:value-of select="$blog-base-link"/>&amp;node=<xsl:value-of select="./@name"/>
            <xsl:text disable-output-escaping="yes">" rel="bookmark" title="</xsl:text>
            <xsl:value-of select="title"/>
            <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
          </xsl:if>
          
          <xsl:value-of select="title"/>
          
          <xsl:if test="$blog-base-link and @name">
            <!--             <xsl:if test="./@link"> -->
            <xsl:text disable-output-escaping="yes">&lt;/a&gt;</xsl:text>
          </xsl:if>
        </h2>

        <!-- content -->
        <div>
          <xsl:value-of select="$blog-summary" />
        </div>
      </li>
      
    </xsl:if>
  </xsl:template>

  
  <!-- ========================================================================================= -->
  <!-- ============================ Individual blog page template ============================== -->
  <!-- ========================================================================================= -->

  <xsl:template match="bloglist/blog">

    <xsl:variable name="blog-tree">
      <xsl:apply-templates select="." mode="pre-process">
        <xsl:with-param name="index" select="../@index"/>
        <xsl:with-param name="blog-base-link" select="''"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:variable name="blog" select="exsl:node-set($blog-tree)/blog"/>
    
    <div class="row">
      <!-- =======content======= -->
      <div class="col-md-9 col-sm-12 content blog-content blog-entry">
        <h1>
          <xsl:value-of select="$blog/title"/>
        </h1>
        <div class="meta" style="padding-bottom: 10px;">
          <!-- date here -->
          <xsl:if test="contains(../@layout,'date')">
            
            <xsl:variable name="formatted-date">
              <xsl:call-template name="format-date-blog">
                <xsl:with-param name="format" select="../@date-format"/>
                <xsl:with-param name="date" select="$blog/@date"/>
              </xsl:call-template>
            </xsl:variable>
            
            <i class="fa fa-calendar" style="padding-right: 5px;"></i><xsl:value-of select="$formatted-date"/>
          </xsl:if>
          <!-- author here -->
          <xsl:if test="$blog/author">
            <i class="fa fa-user"></i><xsl:value-of select="$blog/author"/>
          </xsl:if>
        </div>
        
        <!-- content here -->
        <div class="entry">
          <xsl:apply-templates select="$blog/text" >
            
          </xsl:apply-templates>
          
          <xsl:variable name="blogPath">
            <xsl:value-of select="$PATH"/>
            <xsl:text>?node=</xsl:text>
            <xsl:value-of select="./@name"/>
          </xsl:variable>
          
          <div class="share-container">
                        <span class="label">share this:</span>
   
        
                        <!-- Buttons start here. Copy this ul to your document. -->
                        <ul class="rrssb-buttons clearfix rrssb-1">
                            <li class="rrssb-facebook" data-initwidth="14.285714285714286" data-size="64" style="width: calc(25% - 31.5px);">
                                <!-- Replace with your URL. For best results, make sure you page has the proper FB Open Graph tags in header:
                                https://developers.facebook.com/docs/opengraph/howtos/maximizing-distribution-media-content/ -->
                              <xsl:element name="a">
                                  <xsl:attribute name="href">
                                    <xsl:text>https://www.facebook.com/sharer/sharer.php?u=https://palominosys.com/</xsl:text>
                                    <xsl:value-of select="$blogPath"/>
                                    <xsl:text>&amp;title=</xsl:text>
                                     <xsl:value-of select="title"/>
                                    <xsl:text>&amp;description=</xsl:text>
                                    <xsl:text>We%20arePalomino%30System%20Innovations%20Inc.,%20a%20global%20web%20solutions%20provider,%20and%20creator%20of%20the%20WebPal%20Cloud%20Server,%20with%20over%20400,000%20logins%20world-wide.%20We%20specialize%20in%20managed%20cloud%20services,%20content%20management,%20and%20web%20application%20development. </xsl:text>
<!--                                     <xsl:value-of select="./@name"/> -->
                                  </xsl:attribute>
                                
                                <xsl:attribute name="class">
                                  <xsl:text>popup</xsl:text>
                                </xsl:attribute>
                              
                                
                                    <span class="rrssb-icon">
                                        <svg version="1.1" id="Layer_1" xmlns="https://www.w3.org/TR/SVG11" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve">
                                            <path d="M27.825,4.783c0-2.427-2.182-4.608-4.608-4.608H4.783c-2.422,0-4.608,2.182-4.608,4.608v18.434
                                                c0,2.427,2.181,4.608,4.608,4.608H14V17.379h-3.379v-4.608H14v-1.795c0-3.089,2.335-5.885,5.192-5.885h3.718v4.608h-3.726
                                                c-0.408,0-0.884,0.492-0.884,1.236v1.836h4.609v4.608h-4.609v10.446h4.916c2.422,0,4.608-2.188,4.608-4.608V4.783z"></path>
                                        </svg>
                                    </span>
                                    <span class="rrssb-text">facebook</span>
                                </xsl:element>
                            </li>
                            <li class="rrssb-twitter" data-initwidth="14.285714285714286" data-size="49" style="width: calc(25% - 31.5px);">
                                <!-- Replace href with your Meta and URL information  -->
                                
                                  <xsl:element name="a">
                                  <xsl:attribute name="href">
                                     
                                    <xsl:text>http://twitter.com/home?status=</xsl:text>
                                    <xsl:value-of select="title"/>
                                   <xsl:text> %20https://palominosys.com</xsl:text>
                                    <xsl:value-of select="$blogPath"/>
                                  </xsl:attribute>
                                
                                <xsl:attribute name="class">
                                  <xsl:text>popup</xsl:text>
                                </xsl:attribute>
                                  
                                    <span class="rrssb-icon">
                                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve">
                                        <path d="M24.253,8.756C24.689,17.08,18.297,24.182,9.97,24.62c-3.122,0.162-6.219-0.646-8.861-2.32
                                            c2.703,0.179,5.376-0.648,7.508-2.321c-2.072-0.247-3.818-1.661-4.489-3.638c0.801,0.128,1.62,0.076,2.399-0.155
                                            C4.045,15.72,2.215,13.6,2.115,11.077c0.688,0.275,1.426,0.407,2.168,0.386c-2.135-1.65-2.729-4.621-1.394-6.965
                                            C5.575,7.816,9.54,9.84,13.803,10.071c-0.842-2.739,0.694-5.64,3.434-6.482c2.018-0.623,4.212,0.044,5.546,1.683
                                            c1.186-0.213,2.318-0.662,3.329-1.317c-0.385,1.256-1.247,2.312-2.399,2.942c1.048-0.106,2.069-0.394,3.019-0.851
                                            C26.275,7.229,25.39,8.196,24.253,8.756z"></path>
                                        </svg>
                                   </span>
                                    <span class="rrssb-text">twitter</span>
                                 </xsl:element>
                            </li>
                            <li class="rrssb-reddit" data-initwidth="14.285714285714286" data-size="41" style="width: calc(25% - 31.5px);">
                               
                                  <xsl:element name="a">
                                    <xsl:attribute name="href">
                                      <xsl:text>http://www.reddit.com/submit?url=https://palominosys.com</xsl:text>
                                      <xsl:value-of select="$blogPath"/>
                                      <xsl:text>&amp;title=</xsl:text>
                                       <xsl:value-of select="title"/>
                                      <xsl:text>&amp;description=</xsl:text>
                                      <xsl:text>We%20arePalomino%30System%20Innovations%20Inc.,%20a%20global%20web%20solutions%20provider,%20and%20creator%20of%20the%20WebPal%20Cloud%20Server,%20with%20over%20400,000%20logins%20world-wide.%20We%20specialize%20in%20managed%20cloud%20services,%20content%20management,%20and%20web%20application%20development. </xsl:text>
  <!--                                     <xsl:value-of select="./@name"/> -->
                                    </xsl:attribute>
                                
                                    <xsl:attribute name="class">
                                      <xsl:text>popup</xsl:text>
                                    </xsl:attribute> 
                                    <span class="rrssb-icon">
                                          <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve"><g><path d="M11.794 15.316c0-1.029-0.835-1.895-1.866-1.895c-1.03 0-1.893 0.865-1.893 1.895s0.863 1.9 1.9 1.9 C10.958 17.2 11.8 16.3 11.8 15.316z"></path><path d="M18.1 13.422c-1.029 0-1.895 0.864-1.895 1.895c0 1 0.9 1.9 1.9 1.865c1.031 0 1.869-0.836 1.869-1.865 C19.969 14.3 19.1 13.4 18.1 13.422z"></path><path d="M17.527 19.791c-0.678 0.678-1.826 1.006-3.514 1.006c-0.004 0-0.009 0-0.014 0c-0.004 0-0.01 0-0.015 0 c-1.686 0-2.834-0.328-3.51-1.005c-0.264-0.265-0.693-0.265-0.958 0c-0.264 0.265-0.264 0.7 0 1 c0.943 0.9 2.4 1.4 4.5 1.402c0.005 0 0 0 0 0c0.005 0 0 0 0 0c2.066 0 3.527-0.459 4.47-1.402 c0.265-0.264 0.265-0.693 0.002-0.958C18.221 19.5 17.8 19.5 17.5 19.791z"></path><path d="M27.707 13.267c0-1.785-1.453-3.237-3.236-3.237c-0.793 0-1.518 0.287-2.082 0.761c-2.039-1.295-4.646-2.069-7.438-2.219 l1.483-4.691l4.062 0.956c0.071 1.4 1.3 2.6 2.7 2.555c1.488 0 2.695-1.208 2.695-2.695C25.881 3.2 24.7 2 23.2 2 c-1.059 0-1.979 0.616-2.42 1.508l-4.633-1.091c-0.344-0.081-0.693 0.118-0.803 0.455l-1.793 5.7 C10.548 8.6 7.7 9.4 5.6 10.75C5.006 10.3 4.3 10 3.5 10.029c-1.785 0-3.237 1.452-3.237 3.2 c0 1.1 0.6 2.1 1.4 2.69c-0.04 0.272-0.061 0.551-0.061 0.831c0 2.3 1.3 4.4 3.7 5.9 c2.299 1.5 5.3 2.3 8.6 2.325c3.228 0 6.271-0.825 8.571-2.325c2.387-1.56 3.7-3.66 3.7-5.917 c0-0.26-0.016-0.514-0.051-0.768C27.088 15.5 27.7 14.4 27.7 13.267z M23.186 3.355c0.74 0 1.3 0.6 1.3 1.3 c0 0.738-0.6 1.34-1.34 1.34s-1.342-0.602-1.342-1.34C21.844 4 22.4 3.4 23.2 3.355z M1.648 13.3 c0-1.038 0.844-1.882 1.882-1.882c0.31 0 0.6 0.1 0.9 0.209c-1.049 0.868-1.813 1.861-2.26 2.9 C1.832 14.2 1.6 13.8 1.6 13.267z M21.773 21.57c-2.082 1.357-4.863 2.105-7.831 2.105c-2.967 0-5.747-0.748-7.828-2.105 c-1.991-1.301-3.088-3-3.088-4.782c0-1.784 1.097-3.484 3.088-4.784c2.081-1.358 4.861-2.106 7.828-2.106 c2.967 0 5.7 0.7 7.8 2.106c1.99 1.3 3.1 3 3.1 4.784C24.859 18.6 23.8 20.3 21.8 21.57z M25.787 14.6 c-0.432-1.084-1.191-2.095-2.244-2.977c0.273-0.156 0.59-0.245 0.928-0.245c1.035 0 1.9 0.8 1.9 1.9 C26.354 13.8 26.1 14.3 25.8 14.605z"></path></g></svg>
                                    </span>
                                      <span class="rrssb-text">reddit</span>
                                </xsl:element>
                            </li>
                            <li class="rrssb-googleplus" data-initwidth="14.285714285714286" data-size="56" style="width: calc(25% - 31.5px);">
                                <!-- Replace href with your meta and URL information.  -->
                               <xsl:element name="a">
                                    <xsl:attribute name="href">
                                      <xsl:text>https://plus.google.com/share?url=</xsl:text>
                                        <xsl:value-of select="title"/>
                                        <xsl:text>%20https://palominosys.com</xsl:text>
                                      <xsl:value-of select="$blogPath"/>
                                      
                                    </xsl:attribute>
                                
                                    <xsl:attribute name="class">
                                      <xsl:text>popup</xsl:text>
                                    </xsl:attribute> 
                                
                                  
                                    <span class="rrssb-icon">
                                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve">
                                            <g>
                                                <g>
                                                    <path d="M14.703,15.854l-1.219-0.948c-0.372-0.308-0.88-0.715-0.88-1.459c0-0.748,0.508-1.223,0.95-1.663
                                                        c1.42-1.119,2.839-2.309,2.839-4.817c0-2.58-1.621-3.937-2.399-4.581h2.097l2.202-1.383h-6.67c-1.83,0-4.467,0.433-6.398,2.027
                                                        C3.768,4.287,3.059,6.018,3.059,7.576c0,2.634,2.022,5.328,5.604,5.328c0.339,0,0.71-0.033,1.083-0.068
                                                        c-0.167,0.408-0.336,0.748-0.336,1.324c0,1.04,0.551,1.685,1.011,2.297c-1.524,0.104-4.37,0.273-6.467,1.562
                                                        c-1.998,1.188-2.605,2.916-2.605,4.137c0,2.512,2.358,4.84,7.289,4.84c5.822,0,8.904-3.223,8.904-6.41
                                                        c0.008-2.327-1.359-3.489-2.829-4.731H14.703z M10.269,11.951c-2.912,0-4.231-3.765-4.231-6.037c0-0.884,0.168-1.797,0.744-2.511
                                                        c0.543-0.679,1.489-1.12,2.372-1.12c2.807,0,4.256,3.798,4.256,6.242c0,0.612-0.067,1.694-0.845,2.478
                                                        c-0.537,0.55-1.438,0.948-2.295,0.951V11.951z M10.302,25.609c-3.621,0-5.957-1.732-5.957-4.142c0-2.408,2.165-3.223,2.911-3.492
                                                        c1.421-0.479,3.25-0.545,3.555-0.545c0.338,0,0.52,0,0.766,0.034c2.574,1.838,3.706,2.757,3.706,4.479
                                                        c-0.002,2.073-1.736,3.665-4.982,3.649L10.302,25.609z"></path>
                                                    <polygon points="23.254,11.89 23.254,8.521 21.569,8.521 21.569,11.89 18.202,11.89 18.202,13.604 21.569,13.604 21.569,17.004
                                                        23.254,17.004 23.254,13.604 26.653,13.604 26.653,11.89      "></polygon>
                                                </g>
                                            </g>
                                        </svg>
                                    </span>
                                    <span class="rrssb-text">google+</span>
                              </xsl:element>
                            </li>
                            <li class="rrssb-linkedin small" data-initwidth="14.285714285714286" data-size="52" style="width: 42px;">
                                <xsl:element name="a">
                                    <xsl:attribute name="href">
                                      <xsl:text>http://www.linkedin.com/shareArticle?mini=true&amp;url=https://palominosys.com</xsl:text>
                                      <xsl:value-of select="$blogPath"/>
                                      <xsl:text>&amp;title=</xsl:text>
                                       <xsl:value-of select="title"/>
                                      
                                    </xsl:attribute>
                                
                                    <xsl:attribute name="class">
                                      <xsl:text>popup</xsl:text>
                                  </xsl:attribute>
                                    <span class="rrssb-icon"> 
                                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve">
                                            <path d="M25.424,15.887v8.447h-4.896v-7.882c0-1.979-0.709-3.331-2.48-3.331c-1.354,0-2.158,0.911-2.514,1.803
                                                c-0.129,0.315-0.162,0.753-0.162,1.194v8.216h-4.899c0,0,0.066-13.349,0-14.731h4.899v2.088c-0.01,0.016-0.023,0.032-0.033,0.048
                                                h0.033V11.69c0.65-1.002,1.812-2.435,4.414-2.435C23.008,9.254,25.424,11.361,25.424,15.887z M5.348,2.501
                                                c-1.676,0-2.772,1.092-2.772,2.539c0,1.421,1.066,2.538,2.717,2.546h0.032c1.709,0,2.771-1.132,2.771-2.546
                                                C8.054,3.593,7.019,2.501,5.343,2.501H5.348z M2.867,24.334h4.897V9.603H2.867V24.334z"></path>
                                        </svg>
                                    </span>
                                    <span class="rrssb-text">linkedin</span>
                              </xsl:element>
                            </li>
        
                            <li class="rrssb-pocket small" data-initwidth="14.285714285714286" data-size="46" style="width: 42px;">
                              <xsl:element name="a">
                                    <xsl:attribute name="href">
                                      <xsl:text>https://getpocket.com/save?url=https://palominosys.com</xsl:text>
                                      <xsl:value-of select="$blogPath"/>
                                      <xsl:text>&amp;title=</xsl:text>
                                       <xsl:value-of select="title"/>
                                      <xsl:text>&amp;description=</xsl:text>
                                      <xsl:text>We%20arePalomino%30System%20Innovations%20Inc.,%20a%20global%20web%20solutions%20provider,%20and%20creator%20of%20the%20WebPal%20Cloud%20Server,%20with%20over%20400,000%20logins%20world-wide.%20We%20specialize%20in%20managed%20cloud%20services,%20content%20management,%20and%20web%20application%20development. </xsl:text>
  <!--                                     <xsl:value-of select="./@name"/> -->
                                    </xsl:attribute>
                                
                                    <xsl:attribute name="class">
                                      <xsl:text>popup</xsl:text>
                                  </xsl:attribute>  
                              
                                    <span class="rrssb-icon">
                                        <svg width="32px" height="28px" viewBox="0 0 32 28" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">
                                            <path d="M28.7817528,0.00172488695 C30.8117487,0.00431221738 31.9749312,1.12074529 31.9644402,3.10781507 C31.942147,6.67703739 32.1336065,10.2669583 31.8057648,13.8090137 C30.7147076,25.5813672 17.2181194,31.8996281 7.20714461,25.3808491 C2.71833574,22.4571656 0.196577202,18.3122624 0.0549495772,12.9357897 C-0.0342233715,9.5774348 0.00642900214,6.21519891 0.0300336062,2.85555035 C0.0405245414,1.1129833 1.21157517,0.0146615391 3.01995012,0.00819321302 C7.34746087,-0.00603710433 11.6775944,0.00431221738 16.0064164,0.00172488695 C20.2644248,0.00172488695 24.5237444,-0.00215610869 28.7817528,0.00172488695 L28.7817528,0.00172488695 Z M8.64885184,7.85611511 C7.38773662,7.99113854 6.66148108,8.42606978 6.29310958,9.33228474 C5.90114134,10.2969233 6.17774769,11.1421181 6.89875951,11.8276216 C9.35282156,14.161969 11.8108164,16.4924215 14.2976518,18.7943114 C15.3844131,19.7966007 16.5354102,19.7836177 17.6116843,18.7813283 C20.0185529,16.5495467 22.4070683,14.2982907 24.7824746,12.0327533 C25.9845979,10.8850542 26.1012707,9.56468083 25.1469132,8.60653379 C24.1361858,7.59255976 22.8449191,7.6743528 21.5890476,8.85191291 C19.9936451,10.3488554 18.3680912,11.8172352 16.8395462,13.3777945 C16.1342655,14.093159 15.7200114,14.0048744 15.0566806,13.3440386 C13.4599671,11.7484252 11.8081945,10.2060421 10.1262706,8.70001155 C9.65564653,8.27936164 9.00411403,8.05345704 8.64885184,7.85611511 L8.64885184,7.85611511 L8.64885184,7.85611511 Z"></path>
                                        </svg>
                                    </span>
                                    <span class="rrssb-text">pocket</span>
                              </xsl:element>
                            </li>
        
                            <li class="rrssb-github small" data-initwidth="14.285714285714286" data-size="43" style="width: 42px;">
                              <xsl:element name="a">
                                    <xsl:attribute name="href">
                                      <xsl:text>https://github.com/palominoinc</xsl:text>
                                    </xsl:attribute>
                                
                                    <xsl:attribute name="class">
                                      <xsl:text>popup</xsl:text>
                                  </xsl:attribute>    
                             
                                    <span class="rrssb-icon">
                                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve">
                                        <path d="M13.971,1.571c-7.031,0-12.734,5.702-12.734,12.74c0,5.621,3.636,10.392,8.717,12.083c0.637,0.129,0.869-0.277,0.869-0.615
                                            c0-0.301-0.012-1.102-0.018-2.164c-3.542,0.77-4.29-1.707-4.29-1.707c-0.579-1.473-1.414-1.863-1.414-1.863
                                            c-1.155-0.791,0.088-0.775,0.088-0.775c1.277,0.104,1.96,1.316,1.96,1.312c1.136,1.936,2.991,1.393,3.713,1.059
                                            c0.116-0.822,0.445-1.383,0.81-1.703c-2.829-0.32-5.802-1.414-5.802-6.293c0-1.391,0.496-2.527,1.312-3.418
                                            C7.05,9.905,6.612,8.61,7.305,6.856c0,0,1.069-0.342,3.508,1.306c1.016-0.282,2.105-0.424,3.188-0.429
                                            c1.081,0,2.166,0.155,3.197,0.438c2.431-1.648,3.498-1.306,3.498-1.306c0.695,1.754,0.258,3.043,0.129,3.371
                                            c0.816,0.902,1.315,2.037,1.315,3.43c0,4.892-2.978,5.968-5.814,6.285c0.458,0.387,0.876,1.16,0.876,2.357
                                            c0,1.703-0.016,3.076-0.016,3.482c0,0.334,0.232,0.748,0.877,0.611c5.056-1.688,8.701-6.457,8.701-12.082
                                            C26.708,7.262,21.012,1.563,13.971,1.571L13.971,1.571z"></path>
                                        </svg>
                                    </span>
                                    <span class="rrssb-text">github</span>
                              </xsl:element>
                        </li>
                    </ul><!-- Buttons end here -->
                    <div class="clearfix"></div>
                    <!--  Navigation  Next/Previous  -->
                    <nav class="post-nav">
    						<span class="nav-previous"><a href="#" rel="prev"><i class="fa fa-long-arrow-left"></i>Previous</a></span>
    						<span class="nav-next"><a href="#" rel="next">Next<i class="fa fa-long-arrow-right"></i></a></span>
    				</nav>

            </div>
        </div>
      </div>
      <!-- ======= /content======= -->

      <!-- ======= sidebar ======= -->
      <div class="col-md-3 col-sm-12 blog-sidebar pull-right" style="padding-top: 65px;">    
          <xsl:call-template name="blog-sidebar"/>
      </div>
      <!-- ======= /sidebar ======= -->    
      
    </div>
    
  </xsl:template>
  

  <!-- ========================================================================================= -->
  <!-- ================================= pre-process templates ================================= -->
  <!-- ========================================================================================= -->

  <!-- pre-process bloglist -->
  <xsl:template match="bloglist" mode="pre-process">
    <xsl:param name="max-items"/>
    <xsl:param name="index"/>
    <xsl:param name="blog-base-link"/>
    <xsl:param name="get-archived"/>

    <!-- We need to get a sorted list of the articles before we grab the subset,
or else only the first n items will be sorted -->
    <xsl:variable name="sorted-articles">
      <xsl:for-each select="./blog">
        <xsl:sort select="php:function('strtotime',string(@date))" order="descending" />
        <xsl:choose>
          <xsl:when test="./@archived and ./@archived = 'yes'">
            <!-- do nothing -->
          </xsl:when>
          <xsl:otherwise>
            <xsl:copy-of select="."/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
    </xsl:variable>
    
    <!-- this subset represents the first page's items only -->
    <xsl:variable name="subset">
      <xsl:for-each select="exsl:node-set($sorted-articles)/blog[position() &lt;= $max-items]">
        <xsl:apply-templates select="." mode="pre-process">
          <xsl:with-param name="index" select="$index"/>
          <xsl:with-param name="blog-base-link" select="$blog-base-link"/>
          <xsl:with-param name="get-archived" select="$get-archived"/>
        </xsl:apply-templates>
      </xsl:for-each>
    </xsl:variable>

    <xsl:for-each select="exsl:node-set($subset)/blog">
      <xsl:copy-of select="."/>
    </xsl:for-each>

    <!-- 	<xsl:copy>
<xsl:attribute name="max-items">
<xsl:value-of select="$max-items"/>
</xsl:attribute>
<xsl:apply-templates select="@*|node()" mode="pre-process">
<xsl:with-param name="index" select="$index"/>
<xsl:with-param name="blog-base-link" select="$blog-base-link"/>
<xsl:with-param name="get-archived" select="$get-archived"/>
</xsl:apply-templates>
</xsl:copy> -->
  </xsl:template>

  <!-- pre-process blog -->
  <xsl:template match="blog" mode="pre-process">
    <xsl:param name="index"/>
    <xsl:param name="blog-base-link"/>
    <xsl:param name="get-archived" />

    <!--
<xsl:variable name="pla-time" select="php:function('strtotime',string(./@post-live-at))"/>
<xsl:variable name="ea-time" select="php:function('strtotime',string(./@expire-after))"/>
-->
    <xsl:variable name="current-day" select="php:function('strtotime','today')"/>
    <xsl:variable name="pla-time">
      <xsl:choose>
        <xsl:when test="./@post-live-at='' or not(./@post-live-at)">
          <xsl:value-of select="php:function('strtotime','1990-01-01')"/>
        </xsl:when>
        
        <xsl:otherwise>
          <xsl:value-of select="php:function('strtotime',string(./@post-live-at))"/>
        </xsl:otherwise>
        
      </xsl:choose>
      
    </xsl:variable>
    
    <xsl:variable name="ea-time">
      <xsl:choose>
        <xsl:when test="./@expire-after='' or not(./@expire-after)">
          <xsl:value-of select="php:function('strtotime','2099-12-31')"/>
        </xsl:when>
        
        <xsl:otherwise>
          <xsl:value-of select="php:function('strtotime',string(./@expire-after))"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <!-- <xsl:variable name="date-validate" select="$pla-time &lt;= $current-day and $current-day &lt;= $ea-time"/>-->

    <!-- copy breaking blog or frontpage only if one of these two options is flagged -->
    <!-- copy non-expired blog only -->
    <xsl:if test="(
                  $index!='breaking-blog-only' 
                  or ($index='breaking-blog-only' and @priority='breaking-blog')
                  or ($index='frontpage-only' and @priority='frontpage')
                  )
                  and
                  (
                  ($get-archived and $ea-time &lt; $current-day)
                  or (not($get-archived) and ($pla-time &lt;= $current-day and $current-day &lt;= $ea-time))
                  )">
      <xsl:copy>
        <xsl:attribute name="priority-number">
          <xsl:choose>
            <xsl:when test="@priority='breaking-blog'">
              <xsl:value-of select="3"/>
            </xsl:when>
            
            <xsl:when test="@priority='frontpage'">
              <xsl:value-of select="2"/>
            </xsl:when>
            
            <xsl:when test="@priority='regular'">
              <xsl:value-of select="1"/>
            </xsl:when>
          </xsl:choose>
        </xsl:attribute>

        <xsl:if test="$blog-base-link and $blog-base-link != '' and @name and @name != ''">
          <xsl:attribute name="link">
            <xsl:value-of select="concat($blog-base-link,'&amp;node=',@name)"/>
          </xsl:attribute>
        </xsl:if>

        <xsl:apply-templates select="@*|node()" mode="pre-process"/>
      </xsl:copy>
    </xsl:if>
  </xsl:template>

  <!-- pre-process all other nodes (copy forward) -->
  <xsl:template match="@*|node()" mode="pre-process">
    <xsl:choose>
      <!-- parse whitespace properly -->
      <xsl:when test="local-name()='ch' and ./@value='nbsp'">
        <xsl:text disable-output-escaping="yes"> </xsl:text>
      </xsl:when>
      
      <xsl:otherwise>
        <xsl:copy>
          <xsl:apply-templates select="@*|node()" mode="pre-process"/>
        </xsl:copy>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- ========================================================================================= -->
  <!-- ======================================== functions ====================================== -->
  <!-- ========================================================================================= -->

  <xsl:template name="format-date-blog">
    <xsl:param name="format"/>
    <xsl:param name="date"/>

    <xsl:variable name="php-format-string">
      <xsl:choose>
        <xsl:when test="$format='yyyy-mm-dd'">
          <xsl:value-of select="'Y-m-d'"/>
        </xsl:when>
        
        <xsl:when test="$format='dd-mm-yyyy'">
          <xsl:value-of select="'d-m-Y'"/>
        </xsl:when>
        
        <xsl:when test="$format='yyyy/mm/dd'">
          <xsl:value-of select="'Y/m/d'"/>
        </xsl:when>
        
        <xsl:when test="$format='mm/dd/yyyy'">
          <xsl:value-of select="'m/d/Y'"/>
        </xsl:when>
        
        <xsl:when test="$format='dd/mm/yyyy'">
          <xsl:value-of select="'d/m/Y'"/>
        </xsl:when>
        
        <xsl:when test="$format='dd-Mon-yy'">
          <xsl:value-of select="'d-M-y'"/>
        </xsl:when>
        
        <xsl:when test="$format='dd_Mon_yyyy'">
          <xsl:value-of select="'d M Y'"/>
        </xsl:when>
        
        <xsl:when test="$format='Weekday_Month_dd_yyyy'">
          <xsl:value-of select="'l F d Y'"/>
        </xsl:when>
        
        <xsl:when test="$format='Weekday_dd_Month_yyyy'">
          <xsl:value-of select="'l d F Y'"/>
        </xsl:when>
        
        <xsl:when test="$format='Wkd_Mon_dd_yyyy'">
          <xsl:value-of select="'D M d Y'"/>
        </xsl:when>
        
        <xsl:when test="$format='Wkd_Mon_dd_yy'">
          <xsl:value-of select="'D M d y'"/>
        </xsl:when>
        
        <xsl:when test="$format='Month_dd_yyyy'">
          <xsl:value-of select="'F d Y'"/>
        </xsl:when>
        
        <xsl:when test="$format='Mon_dd_yyyy'">
          <xsl:value-of select="'M d Y'"/>
        </xsl:when>
        
        <xsl:when test="$format='MMM'">
          <xsl:value-of select="'M'"/>
        </xsl:when>
        
        <xsl:when test="$format='D'">
          <xsl:value-of select="'d'"/>
        </xsl:when>
        
        <xsl:when test="$format='YYYY'">
          <xsl:value-of select="'Y'"/>
        </xsl:when>
        
        <xsl:when test="$format='custom_M_d'">
          
          <xsl:element name="div">
            <xsl:attribute name="class">
              <xsl:text>month</xsl:text>
            </xsl:attribute>
            
            <xsl:variable name="date-string" select="php:function('strtotime',string($date))"/>
            <xsl:value-of select="php:function('date','M',number($date-string))"/>
          </xsl:element>
          
          <xsl:element name="div">
            <xsl:attribute name="class">
              <xsl:text>day</xsl:text>
            </xsl:attribute>
            
            <xsl:variable name="date-string" select="php:function('strtotime',string($date))"/>
            <xsl:value-of select="php:function('date','d',number($date-string))"/>
          </xsl:element>
          
        </xsl:when>
        
      </xsl:choose>
    </xsl:variable>

    <xsl:choose>
      <!-- our custom format outputs html, so we'll display a copy of the variable in that instance -->
      <xsl:when test="$format = 'custom_M_d'">
        <xsl:copy-of select="$php-format-string"/>
      </xsl:when>
      
      <xsl:otherwise>
        <xsl:variable name="date-string" select="php:function('strtotime',string($date))"/>
        <xsl:value-of select="php:function('date',$php-format-string,number($date-string))"/>
      </xsl:otherwise>
    </xsl:choose>

  </xsl:template>
  
  
  <!--   
<xsl:template name="create_xpath_to_node">
<xsl:param name="node_id"/>
<xsl:param name="web_root"/>
<xsl:variable name="node" select="$web_root//page[@id=$node_id]"/>
<xsl:variable name="ancestors" select="$node/ancestor::page"/>
<xsl:value-of select="string('/')"/>
<xsl:for-each select="$ancestors">
<xsl:value-of select="@name"/>
<xsl:value-of select="string('/')"/>
</xsl:for-each>
<xsl:value-of select="$node/@name"/>
</xsl:template> -->

  <xsl:template name="create_xpath_to_node_blog">
    <xsl:param name="node_id"/>
    <xsl:param name="web_root"/>
    
    <xsl:variable name="node" select="$web_root//page[@id=$node_id]"/>
    <xsl:variable name="ancestors" select="$node/ancestor::page"/>
    
    <xsl:value-of select="string('/')"/>
    
    <xsl:for-each select="$ancestors">
      <xsl:value-of select="@name"/>
      <xsl:value-of select="string('/')"/>
    </xsl:for-each>
    
    <xsl:value-of select="$node/@name"/>
  </xsl:template>
  
<!--  ==================Recent posts widget==============================  -->
  <xsl:template name="recent-posts">
    <xsl:param name="recent"/>
    
    
    <xsl:for-each select="exsl:node-set($recent)/blog">
      
      <xsl:variable name="blog-link">
        <xsl:value-of select="$PATH"/>
        <xsl:text>?node=</xsl:text>
        <xsl:value-of select="./@name"/>
      </xsl:variable>
      
        <li>
          <div class="thumb img-responsive" >
            
          <xsl:choose>
                    <xsl:when test="./image">
                      <xsl:call-template name="render-image-as-img">
                        <xsl:with-param name="src" select="./image/@src"/>
                        <xsl:with-param name="width" select="50"/>
                        <xsl:with-param name="height" select="50"/>
                      </xsl:call-template>
                    </xsl:when>
            
                    <xsl:otherwise>
                      <xsl:element name="img">
                        <xsl:attribute name="src">
                          <xsl:text>//placehold.it/330x210</xsl:text>
                        </xsl:attribute>
                      </xsl:element>
                    </xsl:otherwise>
          </xsl:choose>
            
          </div>
          <span class="post-info">
            
            <xsl:element name="a">
              <xsl:attribute name="class">
                post-title
              </xsl:attribute>
              
              <xsl:attribute name="href">
                <xsl:value-of select="$blog-link"/>
              </xsl:attribute>
              
              <xsl:value-of select="title"/>
            </xsl:element>
            
            <br/>
            <span class="date">
              <xsl:call-template name="format-date-blog">
                  <xsl:with-param name="date" select="./@date"/>
                  <xsl:with-param name="format" select="'dd_Mon_yyyy'"/>
              </xsl:call-template>
            </span>
            
          </span>
        </li>
    </xsl:for-each>
  </xsl:template>
  
  
<!-- =================SIDEBAR=======================   -->
  <xsl:template name="blog-sidebar">

   <!-- We need to get a sorted list of the articles before we grab the subset,
or else only the first n items will be sorted -->
    <xsl:variable name="sorted-articles">
      <xsl:for-each select="//bloglist/blog">
        <xsl:sort select="php:function('strtotime',string(@date))" order="descending" />
        
        <xsl:choose>
          <xsl:when test="@archived and @archived = 'yes'">
            <!-- do nothing -->
          </xsl:when>
          
          <xsl:otherwise>
            <xsl:copy-of select="."/>
          </xsl:otherwise>
        </xsl:choose>
        
      </xsl:for-each>
    </xsl:variable>
    
      <!--     recent articles subset -->
    <xsl:variable name="subset-recent">
        <xsl:for-each select="exsl:node-set($sorted-articles)/blog[position() &lt;= 5]">
            <xsl:copy-of select="."/>
        </xsl:for-each>
    </xsl:variable>
    
<!--     <div class="col-md-3 blog-sidebar"> -->
    <div>
        <section class="widget search">
          <h3 class="sr-only title">Search Blog</h3>
          <form class="search-blog-form">
              <div class="form-group">
                  <input type="text" class="form-control" placeholder="Search blog..."/>
              </div>
              <button type="submit" class="btn btn-cta btn-cta-secondary">
                <i class="fa fa-search"></i>
              </button>
          </form>
        </section>
        <!--//search-->
      
<!--      parent::* -->
      
       <xsl:variable name="blog-link">
        <xsl:value-of select="$PATH"/>
        <xsl:text>?node=</xsl:text>
        <xsl:value-of select="./@name"/>
      </xsl:variable>
      
      <xsl:choose>
        <xsl:when test="self::*/@name = 'bloglist' ">
          
        </xsl:when>
        <xsl:otherwise> 
<!--      <xsl:if test="child::node()"> -->
          <section class="widget recent-posts blog-filters">
            <h3 class="title"><a href = "/about-us/blog"> Recent Posts </a> </h3>
            <ul class="list-unstyled">

            <xsl:call-template name="recent-posts" mode="meta">
                <xsl:with-param name="recent" select="$subset-recent"/>
            </xsl:call-template>

            </ul>
          </section>  
<!--       </xsl:if> -->
        </xsl:otherwise>
      </xsl:choose>  
        
        <div class="widget blog-filters">
          <div class="title">Categories</div>
          <xsl:call-template name="output-category-list-from-blog-node" mode="meta">
            <xsl:with-param name="bloglist" select="//bloglist"/>
          </xsl:call-template>
        </div>
      
        <div class="widget blog-filters">
          <div class="title">Archives</div>
          <xsl:call-template name="output-year-list-from-blog-node" mode="meta">
            <xsl:with-param name="bloglist" select="//bloglist"/>
          </xsl:call-template>
        </div>
      
        <div class="widget blog-filters">
          <div class="title">Tags</div>
          <xsl:call-template name="output-tag-list-from-blog-node" mode="meta">
            <xsl:with-param name="bloglist" select="//bloglist"/>
          </xsl:call-template>
        </div>
      
      
      </div>
  
  </xsl:template>
  
  <xsl:template name="category-list-link">
  <xsl:param name="path"/>

    <xsl:element name="a">
      <xsl:attribute name="href">
        <xsl:value-of select="$path"/>
        <xsl:text>#category=</xsl:text>
        <xsl:value-of select="./@value"/>
      </xsl:attribute>

      <xsl:attribute name="data-filter-type">
        <xsl:text>category</xsl:text>
      </xsl:attribute>

      <xsl:attribute name="data-filter-value">
        <xsl:value-of select="./@value"/>
      </xsl:attribute>
      <xsl:value-of select="./text()"/>

      <span class="count">
        <xsl:value-of select="'('"/>
        <xsl:value-of select="./@count"/>
        <xsl:value-of select="')'"/>
      </span>
    </xsl:element>
    
  </xsl:template>
  
</xsl:stylesheet>]]></stylesheet>
